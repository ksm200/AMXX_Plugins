#include <amxmodx>
#include <amxmisc>
#include <fun>
#include <cstrike>
#include <fakemeta>
#include <engine>
#include <hamsandwich>
#include <nvault>
#include <ColorChat>


#define PLUGIN "WesternModPL"
#define VERSION "v1.1 by ShoOt4yOu"
#define AUTHOR "ShoOt4yOu"

#define STANDARDOWA_SZYBKOSC 250.0

#define ZADANIE_POKAZ_INFORMACJE 672
#define ZADANIE_WSKRZES 704
#define ZADANIE_WYSZKOLENIE_SANITARNE 736
#define ZADANIE_MARYCHA 736
#define ZADANIE_POKAZ_REKLAME 768
#define ZADANIE_POKAZ_REKLAMEE 768
#define ZADANIE_USTAW_SZYBKOSC 832
#define MAXEXP 1073741824

//#define BOTY 1

new SyncHudObj;
new SyncHudObj2;
new SyncHudObj3;
new g_msg_screenfade;

new sprite_white;
new sprite_blast;

new g_vault;

new podkladajacy;
new rozbrajajacy;

new doswiadczenia_za_zabojstwo;
new doswiadczenie_za_bombe;
new doswiadczenie_za_hs;

new Ubrania_CT[4][]={"sas","gsg9","urban","gign"};
new Ubrania_Terro[4][]={"arctic","leet","guerilla","terror"};

new const maxAmmo[31]={0,52,0,90,1,32,1,100,90,1,120,100,100,90,90,90,100,120,30,120,200,32,90,120,90,2,35,90,90,0,100};
new const maxClip[31] = { -1, 13, -1, 10,  1,  7,  1,  30, 30,  1,  30,  20,  25, 30, 35, 25,  12,  20, 
	10,  30, 100,  8, 30,  30, 20,  2,  7, 30, 30, -1,  50 };

new informacje_przedmiotu_gracza[33][2];
new const nazwy_przedmiotow[][] = {"Brak", 
	"Buty JEZDZIECKIE", //1
	"Podwojna Kamizelka", //2
	"Wzmocniona Kamizelka", //3
	"Weteran Noza", //4
	"Zaskoczenie Wroga", //5
	"Plaszcz POJEDYNKOWICZA", //6 
	"MORFINA", //7
	"Noz ZOLNIERZA", //8
	"Podrecznik DEZERTERA", //9
	"Tajemnica GENERALA", //10
	"Notatki ZABOJCY", //11
	"Tajemnica WOJSKOWA", //12
	"SNAIPER",//13
	"ADREALINA",//14
	"Tajemnica KOWBOYA",//15
	"Wyszkolenie SANITARNE",//16
	"Kamizelka LUCKY LUKA",//17
	"Wytrenowany WETERAN",//18
	"Apteczka",//19
	"Eliminator ROZRZUTU",//20
	"Tytanowe NABOJE",//21
	"Naboje PULKOWNIKA",//22
	"Ogranicznik ROZRZUTU",//23
	"Tarcza DEZERTERA",//24
	"Wytrenowany REKRUT",//25
	"MOCNA KAMIZELKA",//26
	"Notatki KAPITANA",//27
	"Modul ODRZUTOWY",//28
	"ZMYSL POSZUKIWACZA",//29
	"ZABOJCA Z NOZEM",//30
	"Pierscien EXP'a",//31
	"Samogona",//32
	"Pioro Orla",//33
	"LEGENDARNY PIERSCIEN",//34
	"Scout Sniper",//35
	"Odznaka Szeryfa",//36
	"Skill Snajpera",//37	
	"Buty ZOLNIERZA",//38
	"Kamizelka",//39
	"Plaszcz Generala",//40
	"Legendarne Naboje",//41
	"MAGICZNY SHOOTGUN",//42
	"Zloty NOZ",//43
	"Eliminator Obrazen",//44
	"Skarbonka"//45
};

new const opisy_przedmiotow[][] = {"Zabij kogos aby dostac przedmiot", 
	"Cicho biegasz", 
	"Obniza uszkodzenia zadawane graczowi o LW",
	"Obniza uszkodzenia zadawane graczowi o LW", 
	"Zadajesz wieksze obrazenia nozem",
	"Gdy trafisz kogos od tylu, obrazenia sa 2 razy wieksze", 
	"Masz LW premii niewidocznosci",
	"1/LW szans do ponownego odrodzenia sie po smierci",
	"Natychmiastowe zabicie z Noza",
	"Masz 1/LW szans na natychmiastowe zabicie z HE. Posiadasz takze ubranie wroga",
	"Natychmiastowe zabicie granatem HE. Zadajesz LW dodatkowych obrazen",
	"Mozesz zrobic podwojny skok w powietrzu",
	"Twoje obrazenia sa zredukowane o 5. Masz 1/LW szans na oslepienie wroga",
	"Natychmiastowe zabicie z AWP",
	"Za kazdego Fraga dostajesz 50 zycia",
	"Za kazdego Fraga dostajesz pelen magazynek oraz +20 hp",
	"Dostajesz 10 HP co 5 sekund",
	"Masz 500 pancerza",
	"Dostajesz +100 HP co runde, wolniej biegasz",
	"Uzyj, aby uleczyc sie do maksymalnej ilosci HP",
	"Nie posiadasz rozrzutu broni",
	"Zadajesz 10 obrazen wiecej",
	"Zadajesz 20 obrazen wiecej",
	"Twoj rozrzut jest mniejszy",
	"Nie dzialaja na ciebie zadne przedmioty",
	"Dostajesz +50 HP co runde, wolniej biegasz",
	"Masz 1/LW szans na odbicie pocisku przez pancerz",
	"Jestes odporny na 3 pociski w kazdej rundzie",
	"Nacisnij CTRL i SPACE aby uzyc modulu, modul laduje sie co 4 sekundy",
	"Pokazuje wszystkich zywych graczy na radarze",
	"Z noza zadajesz 200 DMG",
	"Dostajesz 2 razy wiecej expa za zabojstwo",
	"Dostajesz 20hp co 5 sekund",
	"Masz zmniejszona grawitacje",
	"Jestes niewidzialny ale masz 15hp",
	"Natychmiastowe zabicie ze Scouta",
	"Zadajesz dwa razy wieksze DMG z deagla",
	"Zadajesz dwa razy wieksze DMG z AWP",
	"Biegasz bardzo szybko",
	"Gdy trzymasz E masz niesmiertelnosc na 5 sek.",
	"Gdy trzymasz E mozesz przechdozic przez sciany tylko przez 5 sek.",
	"Zadajesz 2x wieksze obrazenia z kazdej broni",
	"Natychmiastowe zabicie z M3",
	"Dostajesz 2x EXPA po zabiciu z noza",
	"Twoje obrazenia sa zredukowane o 50",
	"Dostajesz 10 000$ Co runde"
	
};

new nazwa_gracza[33][64];
new klasa_gracza[33];
new poziom_gracza[33] = 1;
new doswiadczenie_gracza[33];

new nowa_klasa_gracza[33];

new const doswiadczenie_poziomu[] = {0,15,48,108,192,300,432,588,768,972,
	1200,1452,1728,2028,2352,2700,3072,3468,3888,4332,
	4800,5292,5808,6348,6912,7500,8112,8748,9408,10092,
	10800,11532,12288,13068,13872,14700,15552,16428,17328,18252,
	19200,20172,21168,22188,23232,24300,25392,26508,27648,28812,
	30000,31212,32448,33708,34992,36300,37632,38988,40368,41772,
	43200,44652,46128,47628,49152,50700,52272,53868,55488,57132,
	58800,60492,62208,63948,65712,67500,69312,71148,73008,74892,
	76800,78732,80688,82668,84672,86700,88752,90828,92928,95052,
	97200,99372,101568,103788,106032,108300,110592,112908,115248,117612,
	120000,122412,124848,127308,129792,132300,134832,137388,139968,142572,
	145200,147852,150528,153228,155952,158700,161472,164268,167088,169932,
	172800,175692,178608,181548,184512,187500,190512,193548,196608,199692,
	202800,205932,209088,212268,215472,218700,221952,225228,228528,231852,
	235200,238572,241968,245388,248832,252300,255792,259308,262848,266412,
	270000,273612,277248,280908,284592,288300,292032,295788,299568,303372,
	307200,311052,314928,318828,322752,326700,330672,334668,338688,342732,
	346800,350892,355008,359148,363312,367500,371712,375948,380208,384492,
	388800,393132,397488,401868,406272,410700,415152,419628,424128,428652,
	433200,437772,442368,446988,451632,456300,460992,465708,470448,475212,
	480000,484812,489648,494508,499392,504300,509232,514188,519168,524172,
	529200,534252,539328,544428,549552,554700,559872,565068,570288,575532,
	580800,586092,591408,596748,602112,607500,612912,618348,623808,629292,
	634800,640332,645888,651468,657072,662700,668352,674028,679728,685452,
	691200,696972,702768,708588,714432,720300,726192,732108,738048,744012,
	750000,756012,762048,768108,774192,780300,786432,792588,798768,804972,
	811200,817452,823728,830028,836352,842700,849072,855468,861888,868332,
	874800,881292,887808,894348,900912,907500,914112,920748,927408,934092,
	940800,947532,954288,961068,967872,974700,981552,988428,995328,1002252,
	1009200,1016172,1023168,1030188,1037232,1044300,1051392,1058508,1065648,1072812,
	1080000,1087212,1094448,1101708,1108992,1116300,1123632,1130988,1138368,1145772,
	1153200,1160652,1168128,1175628,1183152,1190700,1198272,1205868,1213488,1221132,
	1228800,1236492,1244208,1251948,1259712,1267500,1275312,1283148,1291008,1298892,
	1306800,1314732,1322688,1330668,1338672,1346700,1354752,1362828,1370928,1379052,
	1387200,1395372,1403568,1411788,1420032,1428300,1436592,1444908,1453248,1461612,
	1470000,1478412,1486848,1495308,1503792,1512300,1520832,1529388,1537968,1546572,
	1555200,1563852,1572528,1581228,1589952,1598700,1607472,1616268,1625088,1633932,
	1642800,1651692,1660608,1669548,1678512,1687500,1696512,1705548,1714608,1723692,
	1732800,1741932,1751088,1760268,1769472,1778700,1787952,1797228,1806528,1815852,
	1825200,1834572,1843968,1853388,1862832,1872300,1881792,1891308,1900848,1910412,
	1920000,1929612,1939248,1948908,1958592,1968300,1978032,1987788,1997568,2007372,
	2017200,2027052,2036928,2046828,2056752,2066700,2076672,2086668,2096688,2106732,
	2116800,2126892,2137008,2147148,2157312,2167500,2177712,2187948,2198208,2208492,
	2218800,2229132,2239488,2249868,2260272,2270700,2281152,2291628,2302128,2312652,
	2323200,2333772,2344368,2354988,2365632,2376300,2386992,2397708,2408448,2419212,
	2430000,2440812,2451648,2462508,2473392,2484300,2495232,2506188,2517168,2528172,
	2539200,2550252,2561328,2572428,2583552,2594700,2605872,2617068,2628288,2639532,
	2650800,2662092,2673408,2684748,2696112,2707500,2718912,2730348,2741808,2753292,
	2764800,2776332,2787888,2799468,2811072,2822700,2834352,2846028,2857728,2869452,
	2881200,2892972,2904768,2916588,2928432,2940300,2952192,2964108,2976048,2988012,
	3000000,3012012,3024048,3036108,3048192,3060300,3072432,3084588,3096768,3108972,
	3121200,3133452,3145728,3158028,3170352,3182700,3195072,3207468,3219888,3232332,
	3244800,3257292,3269808,3282348,3294912,3307500,3320112,3332748,3345408,3358092,
	3370800,3383532,3396288,3409068,3421872,3434700,3447552,3460428,3473328,3486252,
	3499200,3512172,3525168,3538188,3551232,3564300,3577392,3590508,3603648,3616812,
	3630000,3643212,3656448,3669708,3682992,3696300,3709632,3722988,3736368,3749772,
	3763200,3776652,3790128,3803628,3817152,3830700,3844272,3857868,3871488,3885132,
	3898800,3912492,3926208,3939948,3953712,3967500,3981312,3995148,4009008,4022892,
	4036800,4050732,4064688,4078668,4092672,4106700,4120752,4134828,4148928,4163052,
	4177200,4191372,4205568,4219788,4234032,4248300,4262592,4276908,4291248,4305612,
	4320000,4334412,4348848,4363308,4377792,4392300,4406832,4421388,4435968,4450572,
	4465200,4479852,4494528,4509228,4523952,4538700,4553472,4568268,4583088,4597932,
	4612800,4627692,4642608,4657548,4672512,4687500,4702512,4717548,4732608,4747692,
	4762800,4777932,4793088,4808268,4823472,4838700,4853952,4869228,4884528,4899852,
	4915200,4930572,4945968,4961388,4976832,4992300,5007792,5023308,5038848,5054412,
	5070000,5085612,5101248,5116908,5132592,5148300,5164032,5179788,5195568,5211372,
	5227200,5243052,5258928,5274828,5290752,5306700,5322672,5338668,5354688,5370732,
	5386800,5402892,5419008,5435148,5451312,5467500,5483712,5499948,5516208,5532492,
	5548800,5565132,5581488,5597868,5614272,5630700,5647152,5663628,5680128,5696652,
	5713200,5729772,5746368,5762988,5779632,5796300,5812992,5829708,5846448,5863212,
	5880000,5896812,5913648,5930508,5947392,5964300,5981232,5998188,6015168,6032172,
	6049200,6066252,6083328,6100428,6117552,6134700,6151872,6169068,6186288,6203532,
	6220800,6238092,6255408,6272748,6290112,6307500,6324912,6342348,6359808,6377292,
	6394800,6412332,6429888,6447468,6465072,6482700,6500352,6518028,6535728,6553452,
	6571200,6588972,6606768,6624588,6642432,6660300,6678192,6696108,6714048,6732012,
	6750000,6768012,6786048,6804108,6822192,6840300,6858432,6876588,6894768,6912972,
	6931200,6949452,6967728,6986028,7004352,7022700,7041072,7059468,7077888,7096332,
	7114800,7133292,7151808,7170348,7188912,7207500,7226112,7244748,7263408,7282092,
	7300800,7319532,7338288,7357068,7375872,7394700,7413552,7432428,7451328,7470252,
	7489200,7508172,7527168,7546188,7565232,7584300,7603392,7622508,7641648,7660812,
	7680000,7699212,7718448,7737708,7756992,7776300,7795632,7814988,7834368,7853772,
	7873200,7892652,7912128,7931628,7951152,7970700,7990272,8009868,8029488,8049132,
	8068800,8088492,8108208,8127948,8147712,8167500,8187312,8207148,8227008,8246892,
	8266800,8286732,8306688,8326668,8346672,8366700,8386752,8406828,8426928,8447052,
	8467200,8487372,8507568,8527788,8548032,8568300,8588592,8608908,8629248,8649612,
	8670000,8690412,8710848,8731308,8751792,8772300,8792832,8813388,8833968,8854572,
	8875200,8895852,8916528,8937228,8957952,8978700,8999472,9020268,9041088,9061932,
	9082800,9103692,9124608,9145548,9166512,9187500,9208512,9229548,9250608,9271692,
	9292800,9313932,9335088,9356268,9377472,9398700,9419952,9441228,9462528,9483852,
	9505200,9526572,9547968,9569388,9590832,9612300,9633792,9655308,9676848,9698412,
	9720000,9741612,9763248,9784908,9806592,9828300,9850032,9871788,9893568,9915372,
	9937200,9959052,9980928,10002828,10024752,10046700,10068672,10090668,10112688,10134732,
	10156800,10178892,10201008,10223148,10245312,10267500,10289712,10311948,10334208,10356492,
	10378800,10401132,10423488,10445868,10468272,10490700,10513152,10535628,10558128,10580652,
	10603200,10625772,10648368,10670988,10693632,10716300,10738992,10761708,10784448,10807212,
	10830000,10852812,10875648,10898508,10921392,10944300,10967232,10990188,11013168,11036172,
	11059200,11082252,11105328,11128428,11151552,11174700,11197872,11221068,11244288,11267532,
	11290800,11314092,11337408,11360748,11384112,11407500,11430912,11454348,11477808,11501292,
	11524800,11548332,11571888,11595468,11619072,11642700,11666352,11690028,11713728,11737452,
	11761200,11784972,11808768,11832588,11856432,11880300,11904192,11928108,11952048,11976012,
	12000000,12024012,12048048,12072108,12096192,12120300,12144432,12168588,12192768,12216972,
	12241200,12265452,12289728,12314028,12338352,12362700,12387072,12411468,12435888,12460332,
	12484800,12509292,12533808,12558348,12582912,12607500,12632112,12656748,12681408,12706092,
	12730800,12755532,12780288,12805068,12829872,12854700,12879552,12904428,12929328,12954252,
	12979200,13004172,13029168,13054188,13079232,13104300,13129392,13154508,13179648,13204812,
	13230000,13255212,13280448,13305708,13330992,13356300,13381632,13406988,13432368,13457772,
	13483200,13508652,13534128,13559628,13585152,13610700,13636272,13661868,13687488,13713132,
	13738800,13764492,13790208,13815948,13841712,13867500,13893312,13919148,13945008,13970892,
	13996800,14022732,14048688,14074668,14100672,14126700,14152752,14178828,14204928,14231052,
	14257200,14283372,14309568,14335788,14362032,14388300,14414592,14440908,14467248,14493612,
	14520000,14546412,14572848,14599308,14625792,14652300,14678832,14705388,14731968,14758572,
	14785200,14811852,14838528,14865228,14891952,14918700,14945472,14972268,14999088,15025932,
	15052800,15079692,15106608,15133548,15160512,15187500,15214512,15241548,15268608,15295692,
	15322800,15349932,15377088,15404268,15431472,15458700,15485952,15513228,15540528,15567852,
	15595200,15622572,15649968,15677388,15704832,15732300,15759792,15787308,15814848,15842412,
	15870000,15897612,15925248,15952908,15980592,16008300,16036032,16063788,16091568,16119372,
	16147200,16175052,16202928,16230828,16258752,16286700,16314672,16342668,16370688,16398732,
	16426800,16454892,16483008,16511148,16539312,16567500,16595712,16623948,16652208,16680492,
	16708800,16737132,16765488,16793868,16822272,16850700,16879152,16907628,16936128,16964652,
	16993200,17021772,17050368,17078988,17107632,17136300,17164992,17193708,17222448,17251212,
	17280000,17308812,17337648,17366508,17395392,17424300,17453232,17482188,17511168,17540172,
	17569200,17598252,17627328,17656428,17685552,17714700,17743872,17773068,17802288,17831532,
	17860800,17890092,17919408,17948748,17978112,18007500,18036912,18066348,18095808,18125292,
	18154800,18184332,18213888,18243468,18273072,18302700,18332352,18362028,18391728,18421452,
	18451200,18480972,18510768,18540588,18570432,18600300,18630192,18660108,18690048,18720012,
	18750000,18780012,18810048,18840108,18870192,18900300,18930432,18960588,18990768,19020972,
	19051200,19081452,19111728,19142028,19172352,19202700,19233072,19263468,19293888,19324332,
	19354800,19385292,19415808,19446348,19476912,19507500,19538112,19568748,19599408,19630092,
	19660800,19691532,19722288,19753068,19783872,19814700,19845552,19876428,19907328,19938252,
	19969200,20000172,20031168,20062188,20093232,20124300,20155392,20186508,20217648,20248812,
	20280000,20311212,20342448,20373708,20404992,20436300,20467632,20498988,20530368,20561772,
	20593200,20624652,20656128,20687628,20719152,20750700,20782272,20813868,20845488,20877132,
	20908800,20940492,20972208,21003948,21035712,21067500,21099312,21131148,21163008,21194892,
	21226800,21258732,21290688,21322668,21354672,21386700,21418752,21450828,21482928,21515052,
	21547200,21579372,21611568,21643788,21676032,21708300,21740592,21772908,21805248,21837612,
	21870000,21902412,21934848,21967308,21999792,22032300,22064832,22097388,22129968,22162572,
	22195200,22227852,22260528,22293228,22325952,22358700,22391472,22424268,22457088,22489932,
	22522800,22555692,22588608,22621548,22654512,22687500,22720512,22753548,22786608,22819692,
	22852800,22885932,22919088,22952268,22985472,23018700,23051952,23085228,23118528,23151852,
	23185200,23218572,23251968,23285388,23318832,23352300,23385792,23419308,23452848,23486412,
	23520000,23553612,23587248,23620908,23654592,23688300,23722032,23755788,23789568,23823372,
	23857200,23891052,23924928,23958828,23992752,24026700,24060672,24094668,24128688,24162732,
	24196800,24230892,24265008,24299148,24333312,24367500,24401712,24435948,24470208,24504492,
	24538800,24573132,24607488,24641868,24676272,24710700,24745152,24779628,24814128,24848652,
	24883200,24917772,24952368,24986988,25021632,25056300,25090992,25125708,25160448,25195212,
	25230000,25264812,25299648,25334508,25369392,25404300,25439232,25474188,25509168,25544172,
	25579200,25614252,25649328,25684428,25719552,25754700,25789872,25825068,25860288,25895532,
	25930800,25966092,26001408,26036748,26072112,26107500,26142912,26178348,26213808,26249292,
	26284800,26320332,26355888,26391468,26427072,26462700,26498352,26534028,26569728,26605452,
	26641200,26676972,26712768,26748588,26784432,26820300,26856192,26892108,26928048,26964012,
	27000000,27036012,27072048,27108108,27144192,27180300,27216432,27252588,27288768,27324972,
	27361200,27397452,27433728,27470028,27506352,27542700,27579072,27615468,27651888,27688332,
	27724800,27761292,27797808,27834348,27870912,27907500,27944112,27980748,28017408,28054092,
	28090800,28127532,28164288,28201068,28237872,28274700,28311552,28348428,28385328,28422252,
	28459200,28496172,28533168,28570188,28607232,28644300,28681392,28718508,28755648,28792812,
	28830000,28867212,28904448,28941708,28978992,29016300,29053632,29090988,29128368,29165772,
	29203200,29240652,29278128,29315628,29353152,29390700,29428272,29465868,29503488,29541132,
	29578800,29616492,29654208,29691948,29729712,29767500,29805312,29843148,29881008,29918892,
	29956800,29994732,30032688,30070668,30108672,30146700,30184752,30222828,30260928,30299052,
	30337200,30375372,30413568,30451788,30490032,30528300,30566592,30604908,30643248,30681612,
	30720000,30758412,30796848,30835308,30873792,30912300,30950832,30989388,31027968,31066572,
	31105200,31143852,31182528,31221228,31259952,31298700,31337472,31376268,31415088,31453932,
	31492800,31531692,31570608,31609548,31648512,31687500,31726512,31765548,31804608,31843692,
	31882800,31921932,31961088,32000268,32039472,32078700,32117952,32157228,32196528,32235852,
	32275200,32314572,32353968,32393388,32432832,32472300,32511792,32551308,32590848,32630412,
	32670000,32709612,32749248,32788908,32828592,32868300,32908032,32947788,32987568,33027372,
	33067200,33107052,33146928,33186828,33226752,33266700,33306672,33346668,33386688,33426732,
	33466800,33506892,33547008,33587148,33627312,33667500,33707712,33747948,33788208,33828492,
	33868800,33909132,33949488,33989868,34030272,34070700,34111152,34151628,34192128,34232652,
	34273200,34313772,34354368,34394988,34435632,34476300,34516992,34557708,34598448,34639212,
	34680000,34720812,34761648,34802508,34843392,34884300,34925232,34966188,35007168,35048172,
	35089200,35130252,35171328,35212428,35253552,35294700,35335872,35377068,35418288,35459532,
	35500800,35542092,35583408,35624748,35666112,35707500,35748912,35790348,35831808,35873292,
	35914800,35956332,35997888,36039468,36081072,36122700,36164352,36206028,36247728,36289452,
	36331200,36372972,36414768,36456588,36498432,36540300,36582192,36624108,36666048,36708012,
	36750000,36792012,36834048,36876108,36918192,36960300,37002432,37044588,37086768,37128972,
	37171200,37213452,37255728,37298028,37340352,37382700,37425072,37467468,37509888,37552332,
	37594800,37637292,37679808,37722348,37764912,37807500,37850112,37892748,37935408,37978092,
	38020800,38063532,38106288,38149068,38191872,38234700,38277552,38320428,38363328,38406252,
	38449200,38492172,38535168,38578188,38621232,38664300,38707392,38750508,38793648,38836812,
	38880000,38923212,38966448,39009708,39052992,39096300,39139632,39182988,39226368,39269772,
	39313200,39356652,39400128,39443628,39487152,39530700,39574272,39617868,39661488,39705132,
	39748800,39792492,39836208,39879948,39923712,39967500,40011312,40055148,40099008,40142892,
	40186800,40230732,40274688,40318668,40362672,40406700,40450752,40494828,40538928,40583052,
	40627200,40671372,40715568,40759788,40804032,40848300,40892592,40936908,40981248,41025612,
	41070000,41114412,41158848,41203308,41247792,41292300,41336832,41381388,41425968,41470572,
	41515200,41559852,41604528,41649228,41693952,41738700,41783472,41828268,41873088,41917932,
	41962800,42007692,42052608,42097548,42142512,42187500,42232512,42277548,42322608,42367692,
	42412800,42457932,42503088,42548268,42593472,42638700,42683952,42729228,42774528,42819852,
	42865200,42910572,42955968,43001388,43046832,43092300,43137792,43183308,43228848,43274412,
	43320000,43365612,43411248,43456908,43502592,43548300,43594032,43639788,43685568,43731372,
	43777200,43823052,43868928,43914828,43960752,44006700,44052672,44098668,44144688,44190732,
	44236800,44282892,44329008,44375148,44421312,44467500,44513712,44559948,44606208,44652492,
	44698800,44745132,44791488,44837868,44884272,44930700,44977152,45023628,45070128,45116652,
	45163200,45209772,45256368,45302988,45349632,45396300,45442992,45489708,45536448,45583212,
	45630000,45676812,45723648,45770508,45817392,45864300,45911232,45958188,46005168,46052172,
	46099200,46146252,46193328,46240428,46287552,46334700,46381872,46429068,46476288,46523532,
	46570800,46618092,46665408,46712748,46760112,46807500,46854912,46902348,46949808,46997292,
	47044800,47092332,47139888,47187468,47235072,47282700,47330352,47378028,47425728,47473452,
	47521200,47568972,47616768,47664588,47712432,47760300,47808192,47856108,47904048,47952012,
	48000000,48048012,48096048,48144108,48192192,48240300,48288432,48336588,48384768,48432972,
	48481200,48529452,48577728,48626028,48674352,48722700,48771072,48819468,48867888,48916332,
	48964800,49013292,49061808,49110348,49158912,49207500,49256112,49304748,49353408,49402092,
	49450800,49499532,49548288,49597068,49645872,49694700,49743552,49792428,49841328,49890252,
	49939200,49988172,50037168,50086188,50135232,50184300,50233392,50282508,50331648,50380812,
	50430000,50479212,50528448,50577708,50626992,50676300,50725632,50774988,50824368,50873772,
	50923200,50972652,51022128,51071628,51121152,51170700,51220272,51269868,51319488,51369132,
	51418800,51468492,51518208,51567948,51617712,51667500,51717312,51767148,51817008,51866892,
	51916800,51966732,52016688,52066668,52116672,52166700,52216752,52266828,52316928,52367052,
	52417200,52467372,52517568,52567788,52618032,52668300,52718592,52768908,52819248,52869612,
	52920000,52970412,53020848,53071308,53121792,53172300,53222832,53273388,53323968,53374572,
	53425200,53475852,53526528,53577228,53627952,53678700,53729472,53780268,53831088,53881932,
	53932800,53983692,54034608,54085548,54136512,54187500,54238512,54289548,54340608,54391692,
	54442800,54493932,54545088,54596268,54647472,54698700,54749952,54801228,54852528,54903852,
	54955200,55006572,55057968,55109388,55160832,55212300,55263792,55315308,55366848,55418412,
	55470000,55521612,55573248,55624908,55676592,55728300,55780032,55831788,55883568,55935372,
	55987200,56039052,56090928,56142828,56194752,56246700,56298672,56350668,56402688,56454732,
	56506800,56558892,56611008,56663148,56715312,56767500,56819712,56871948,56924208,56976492,
	57028800,57081132,57133488,57185868,57238272,57290700,57343152,57395628,57448128,57500652,
	57553200,57605772,57658368,57710988,57763632,57816300,57868992,57921708,57974448,58027212,
	58080000,58132812,58185648,58238508,58291392,58344300,58397232,58450188,58503168,58556172,
	58609200,58662252,58715328,58768428,58821552,58874700,58927872,58981068,59034288,59087532,
	59140800,59194092,59247408,59300748,59354112,59407500,59460912,59514348,59567808,59621292,
	59674800,59728332,59781888,59835468,59889072,59942700,59996352,60050028,60103728,60157452,
	60211200,60264972,60318768,60372588,60426432,60480300,60534192,60588108,60642048,60696012,
	60750000,60804012,60858048,60912108,60966192,61020300,61074432,61128588,61182768,61236972,
	61291200,61345452,61399728,61454028,61508352,61562700,61617072,61671468,61725888,61780332,
	61834800,61889292,61943808,61998348,62052912,62107500,62162112,62216748,62271408,62326092,
	62380800,62435532,62490288,62545068,62599872,62654700,62709552,62764428,62819328,62874252,
	62929200,62984172,63039168,63094188,63149232,63204300,63259392,63314508,63369648,63424812,
	63480000,63535212,63590448,63645708,63700992,63756300,63811632,63866988,63922368,63977772,
	64033200,64088652,64144128,64199628,64255152,64310700,64366272,64421868,64477488,64533132,
	64588800,64644492,64700208,64755948,64811712,64867500,64923312,64979148,65035008,65090892,
	65146800,65202732,65258688,65314668,65370672,65426700,65482752,65538828,65594928,65651052,
	65707200,65763372,65819568,65875788,65932032,65988300,66044592,66100908,66157248,66213612,
	66270000,66326412,66382848,66439308,66495792,66552300,66608832,66665388,66721968,66778572,
	66835200,66891852,66948528,67005228,67061952,67118700,67175472,67232268,67289088,67345932,
	67402800,67459692,67516608,67573548,67630512,67687500,67744512,67801548,67858608,67915692,
	67972800,68029932,68087088,68144268,68201472,68258700,68315952,68373228,68430528,68487852,
	68545200,68602572,68659968,68717388,68774832,68832300,68889792,68947308,69004848,69062412,
	69120000,69177612,69235248,69292908,69350592,69408300,69466032,69523788,69581568,69639372,
	69697200,69755052,69812928,69870828,69928752,69986700,70044672,70102668,70160688,70218732,
	70276800,70334892,70393008,70451148,70509312,70567500,70625712,70683948,70742208,70800492,
	70858800,70917132,70975488,71033868,71092272,71150700,71209152,71267628,71326128,71384652,
	71443200,71501772,71560368,71618988,71677632,71736300,71794992,71853708,71912448,71971212,
	72030000,72088812,72147648,72206508,72265392,72324300,72383232,72442188,72501168,72560172,
	72619200,72678252,72737328,72796428,72855552,72914700,72973872,73033068,73092288,73151532,
	73210800,73270092,73329408,73388748,73448112,73507500,73566912,73626348,73685808,73745292,
	73804800,73864332,73923888,73983468,74043072,74102700,74162352,74222028,74281728,74341452,
	74401200,74460972,74520768,74580588,74640432,74700300,74760192,74820108,74880048,74940012,
	75000000,75060012,75120048,75180108,75240192,75300300,75360432,75420588,75480768,75540972,
	75601200,75661452,75721728,75782028,75842352,75902700,75963072,76023468,76083888,76144332,
	76204800,76265292,76325808,76386348,76446912,76507500,76568112,76628748,76689408,76750092,
	76810800,76871532,76932288,76993068,77053872,77114700,77175552,77236428,77297328,77358252,
	77419200,77480172,77541168,77602188,77663232,77724300,77785392,77846508,77907648,77968812,
	78030000,78091212,78152448,78213708,78274992,78336300,78397632,78458988,78520368,78581772,
	78643200,78704652,78766128,78827628,78889152,78950700,79012272,79073868,79135488,79197132,
	79258800,79320492,79382208,79443948,79505712,79567500,79629312,79691148,79753008,79814892,
	79876800,79938732,80000688,80062668,80124672,80186700,80248752,80310828,80372928,80435052,
	80497200,80559372,80621568,80683788,80746032,80808300,80870592,80932908,80995248,81057612,
	81120000,81182412,81244848,81307308,81369792,81432300,81494832,81557388,81619968,81682572,
	81745200,81807852,81870528,81933228,81995952,82058700,82121472,82184268,82247088,82309932,
	82372800,82435692,82498608,82561548,82624512,82687500,82750512,82813548,82876608,82939692,
	83002800,83065932,83129088,83192268,83255472,83318700,83381952,83445228,83508528,83571852,
	83635200,83698572,83761968,83825388,83888832,83952300,84015792,84079308,84142848,84206412,
	84270000,84333612,84397248,84460908,84524592,84588300,84652032,84715788,84779568,84843372,
	84907200,84971052,85034928,85098828,85162752,85226700,85290672,85354668,85418688,85482732,
	85546800,85610892,85675008,85739148,85803312,85867500,85931712,85995948,86060208,86124492,
	86188800,86253132,86317488,86381868,86446272,86510700,86575152,86639628,86704128,86768652,
	86833200,86897772,86962368,87026988,87091632,87156300,87220992,87285708,87350448,87415212,
	87480000,87544812,87609648,87674508,87739392,87804300,87869232,87934188,87999168,88064172,
	88129200,88194252,88259328,88324428,88389552,88454700,88519872,88585068,88650288,88715532,
	88780800,88846092,88911408,88976748,89042112,89107500,89172912,89238348,89303808,89369292,
	89434800,89500332,89565888,89631468,89697072,89762700,89828352,89894028,89959728,90025452,
	90091200,90156972,90222768,90288588,90354432,90420300,90486192,90552108,90618048,90684012,
	90750000,90816012,90882048,90948108,91014192,91080300,91146432,91212588,91278768,91344972,
	91411200,91477452,91543728,91610028,91676352,91742700,91809072,91875468,91941888,92008332,
	92074800,92141292,92207808,92274348,92340912,92407500,92474112,92540748,92607408,92674092,
	92740800,92807532,92874288,92941068,93007872,93074700,93141552,93208428,93275328,93342252,
	93409200,93476172,93543168,93610188,93677232,93744300,93811392,93878508,93945648,94012812,
	94080000,94147212,94214448,94281708,94348992,94416300,94483632,94550988,94618368,94685772,
	94753200,94820652,94888128,94955628,95023152,95090700,95158272,95225868,95293488,95361132,
	95428800,95496492,95564208,95631948,95699712,95767500,95835312,95903148,95971008,96038892,
	96106800,96174732,96242688,96310668,96378672,96446700,96514752,96582828,96650928,96719052,
	96787200,96855372,96923568,96991788,97060032,97128300,97196592,97264908,97333248,97401612,
	97470000,97538412,97606848,97675308,97743792,97812300,97880832,97949388,98017968,98086572,
	98155200,98223852,98292528,98361228,98429952,98498700,98567472,98636268,98705088,98773932,
	98842800,98911692,98980608,99049548,99118512,99187500,99256512,99325548,99394608,99463692,
	99532800,99601932,99671088,99740268,99809472,99878700,99947952,100017228,100086528,100155852,
	100225200,100294572,100363968,100433388,100502832,100572300,100641792,100711308,100780848,100850412,
	100920000,100989612,101059248,101128908,101198592,101268300,101338032,101407788,101477568,101547372,
	101617200,101687052,101756928,101826828,101896752,101966700,102036672,102106668,102176688,102246732,
	102316800,102386892,102457008,102527148,102597312,102667500,102737712,102807948,102878208,102948492,
	103018800,103089132,103159488,103229868,103300272,103370700,103441152,103511628,103582128,103652652,
	103723200,103793772,103864368,103934988,104005632,104076300,104146992,104217708,104288448,104359212,
	104430000,104500812,104571648,104642508,104713392,104784300,104855232,104926188,104997168,105068172,
	105139200,105210252,105281328,105352428,105423552,105494700,105565872,105637068,105708288,105779532,
	105850800,105922092,105993408,106064748,106136112,106207500,106278912,106350348,106421808,106493292,
	106564800,106636332,106707888,106779468,106851072,106922700,106994352,107066028,107137728,107209452,
	107281200,107352972,107424768,107496588,107568432,107640300,107712192,107784108,107856048,107928012,
	108000000,108072012,108144048,108216108,108288192,108360300,108432432,108504588,108576768,108648972,
	108721200,108793452,108865728,108938028,109010352,109082700,109155072,109227468,109299888,109372332,
	109444800,109517292,109589808,109662348,109734912,109807500,109880112,109952748,110025408,110098092,
	110170800,110243532,110316288,110389068,110461872,110534700,110607552,110680428,110753328,110826252,
	110899200,110972172,111045168,111118188,111191232,111264300,111337392,111410508,111483648,111556812,
	111630000,111703212,111776448,111849708,111922992,111996300,112069632,112142988,112216368,112289772,
	112363200,112436652,112510128,112583628,112657152,112730700,112804272,112877868,112951488,113025132,
	113098800,113172492,113246208,113319948,113393712,113467500,113541312,113615148,113689008,113762892,
	113836800,113910732,113984688,114058668,114132672,114206700,114280752,114354828,114428928,114503052,
	114577200,114651372,114725568,114799788,114874032,114948300,115022592,115096908,115171248,115245612,
	115320000,115394412,115468848,115543308,115617792,115692300,115766832,115841388,115915968,115990572,
	116065200,116139852,116214528,116289228,116363952,116438700,116513472,116588268,116663088,116737932,
	116812800,116887692,116962608,117037548,117112512,117187500,117262512,117337548,117412608,117487692,
	117562800,117637932,117713088,117788268,117863472,117938700,118013952,118089228,118164528,118239852,
	118315200,118390572,118465968,118541388,118616832,118692300,118767792,118843308,118918848,118994412,
	119070000,119145612,119221248,119296908,119372592,119448300,119524032,119599788,119675568,119751372,
	119827200,119903052,119978928,120054828,120130752,120206700,120282672,120358668,120434688,120510732,
	120586800,120662892,120739008,120815148,120891312,120967500,121043712,121119948,121196208,121272492,
	121348800,121425132,121501488,121577868,121654272,121730700,121807152,121883628,121960128,122036652,
	122113200,122189772,122266368,122342988,122419632,122496300,122572992,122649708,122726448,122803212,
	122880000,122956812,123033648,123110508,123187392,123264300,123341232,123418188,123495168,123572172,
	123649200,123726252,123803328,123880428,123957552,124034700,124111872,124189068,124266288,124343532,
	124420800,124498092,124575408,124652748,124730112,124807500,124884912,124962348,125039808,125117292,
	125194800,125272332,125349888,125427468,125505072,125582700,125660352,125738028,125815728,125893452,
	125971200,126048972,126126768,126204588,126282432,126360300,126438192,126516108,126594048,126672012,
	126750000,126828012,126906048,126984108,127062192,127140300,127218432,127296588,127374768,127452972,
	127531200,127609452,127687728,127766028,127844352,127922700,128001072,128079468,128157888,128236332,
	128314800,128393292,128471808,128550348,128628912,128707500,128786112,128864748,128943408,129022092,
	129100800,129179532,129258288,129337068,129415872,129494700,129573552,129652428,129731328,129810252,
	129889200,129968172,130047168,130126188,130205232,130284300,130363392,130442508,130521648,130600812,
	130680000,130759212,130838448,130917708,130996992,131076300,131155632,131234988,131314368,131393772,
	131473200,131552652,131632128,131711628,131791152,131870700,131950272,132029868,132109488,132189132,
	132268800,132348492,132428208,132507948,132587712,132667500,132747312,132827148,132907008,132986892,
	133066800,133146732,133226688,133306668,133386672,133466700,133546752,133626828,133706928,133787052,
	133867200,133947372,134027568,134107788,134188032,134268300,134348592,134428908,134509248,134589612,
	134670000,134750412,134830848,134911308,134991792,135072300,135152832,135233388,135313968,135394572,
	135475200,135555852,135636528,135717228,135797952,135878700,135959472,136040268,136121088,136201932,
	136282800,136363692,136444608,136525548,136606512,136687500,136768512,136849548,136930608,137011692,
	137092800,137173932,137255088,137336268,137417472,137498700,137579952,137661228,137742528,137823852,
	137905200,137986572,138067968,138149388,138230832,138312300,138393792,138475308,138556848,138638412,
	138720000,138801612,138883248,138964908,139046592,139128300,139210032,139291788,139373568,139455372,
	139537200,139619052,139700928,139782828,139864752,139946700,140028672,140110668,140192688,140274732,
	140356800,140438892,140521008,140603148,140685312,140767500,140849712,140931948,141014208,141096492,
	141178800,141261132,141343488,141425868,141508272,141590700,141673152,141755628,141838128,141920652,
	142003200,142085772,142168368,142250988,142333632,142416300,142498992,142581708,142664448,142747212,
	142830000,142912812,142995648,143078508,143161392,143244300,143327232,143410188,143493168,143576172,
	143659200,143742252,143825328,143908428,143991552,144074700,144157872,144241068,144324288,144407532,
	144490800,144574092,144657408,144740748,144824112,144907500,144990912,145074348,145157808,145241292,
	145324800,145408332,145491888,145575468,145659072,145742700,145826352,145910028,145993728,146077452,
	146161200,146244972,146328768,146412588,146496432,146580300,146664192,146748108,146832048,146916012,
	147000000,147084012,147168048,147252108,147336192,147420300,147504432,147588588,147672768,147756972,
	147841200,147925452,148009728,148094028,148178352,148262700,148347072,148431468,148515888,148600332,
	148684800,148769292,148853808,148938348,149022912,149107500,149192112,149276748,149361408,149446092,
	149530800,149615532,149700288,149785068,149869872,149954700,150039552,150124428,150209328,150294252,
	150379200,150464172,150549168,150634188,150719232,150804300,150889392,150974508,151059648,151144812,
	151230000,151315212,151400448,151485708,151570992,151656300,151741632,151826988,151912368,151997772,
	152083200,152168652,152254128,152339628,152425152,152510700,152596272,152681868,152767488,152853132,
	152938800,153024492,153110208,153195948,153281712,153367500,153453312,153539148,153625008,153710892,
	153796800,153882732,153968688,154054668,154140672,154226700,154312752,154398828,154484928,154571052,
	154657200,154743372,154829568,154915788,155002032,155088300,155174592,155260908,155347248,155433612,
	155520000,155606412,155692848,155779308,155865792,155952300,156038832,156125388,156211968,156298572,
	156385200,156471852,156558528,156645228,156731952,156818700,156905472,156992268,157079088,157165932,
	157252800,157339692,157426608,157513548,157600512,157687500,157774512,157861548,157948608,158035692,
	158122800,158209932,158297088,158384268,158471472,158558700,158645952,158733228,158820528,158907852,
	158995200,159082572,159169968,159257388,159344832,159432300,159519792,159607308,159694848,159782412,
	159870000,159957612,160045248,160132908,160220592,160308300,160396032,160483788,160571568,160659372,
	160747200,160835052,160922928,161010828,161098752,161186700,161274672,161362668,161450688,161538732,
	161626800,161714892,161803008,161891148,161979312,162067500,162155712,162243948,162332208,162420492,
	162508800,162597132,162685488,162773868,162862272,162950700,163039152,163127628,163216128,163304652,
	163393200,163481772,163570368,163658988,163747632,163836300,163924992,164013708,164102448,164191212,
	164280000,164368812,164457648,164546508,164635392,164724300,164813232,164902188,164991168,165080172,
	165169200,165258252,165347328,165436428,165525552,165614700,165703872,165793068,165882288,165971532,
	166060800,166150092,166239408,166328748,166418112,166507500,166596912,166686348,166775808,166865292,
	166954800,167044332,167133888,167223468,167313072,167402700,167492352,167582028,167671728,167761452,
	167851200,167940972,168030768,168120588,168210432,168300300,168390192,168480108,168570048,168660012,
	168750000,168840012,168930048,169020108,169110192,169200300,169290432,169380588,169470768,169560972,
	169651200,169741452,169831728,169922028,170012352,170102700,170193072,170283468,170373888,170464332,
	170554800,170645292,170735808,170826348,170916912,171007500,171098112,171188748,171279408,171370092,
	171460800,171551532,171642288,171733068,171823872,171914700,172005552,172096428,172187328,172278252,
	172369200,172460172,172551168,172642188,172733232,172824300,172915392,173006508,173097648,173188812,
	173280000,173371212,173462448,173553708,173644992,173736300,173827632,173918988,174010368,174101772,
	174193200,174284652,174376128,174467628,174559152,174650700,174742272,174833868,174925488,175017132,
	175108800,175200492,175292208,175383948,175475712,175567500,175659312,175751148,175843008,175934892,
	176026800,176118732,176210688,176302668,176394672,176486700,176578752,176670828,176762928,176855052,
	176947200,177039372,177131568,177223788,177316032,177408300,177500592,177592908,177685248,177777612,
	177870000,177962412,178054848,178147308,178239792,178332300,178424832,178517388,178609968,178702572,
	178795200,178887852,178980528,179073228,179165952,179258700,179351472,179444268,179537088,179629932,
	179722800,179815692,179908608,180001548,180094512,180187500,180280512,180373548,180466608,180559692,
	180652800,180745932,180839088,180932268,181025472,181118700,181211952,181305228,181398528,181491852,
	181585200,181678572,181771968,181865388,181958832,182052300,182145792,182239308,182332848,182426412,
	182520000,182613612,182707248,182800908,182894592,182988300,183082032,183175788,183269568,183363372,
	183457200,183551052,183644928,183738828,183832752,183926700,184020672,184114668,184208688,184302732,
	184396800,184490892,184585008,184679148,184773312,184867500,184961712,185055948,185150208,185244492,
	185338800,185433132,185527488,185621868,185716272,185810700,185905152,185999628,186094128,186188652,
	186283200,186377772,186472368,186566988,186661632,186756300,186850992,186945708,187040448,187135212,
	187230000,187324812,187419648,187514508,187609392,187704300,187799232,187894188,187989168,188084172,
	188179200,188274252,188369328,188464428,188559552,188654700,188749872,188845068,188940288,189035532,
	189130800,189226092,189321408,189416748,189512112,189607500,189702912,189798348,189893808,189989292,
	190084800,190180332,190275888,190371468,190467072,190562700,190658352,190754028,190849728,190945452,
	191041200,191136972,191232768,191328588,191424432,191520300,191616192,191712108,191808048,191904012,
	192000000,192096012,192192048,192288108,192384192,192480300,192576432,192672588,192768768,192864972,
	192961200,193057452,193153728,193250028,193346352,193442700,193539072,193635468,193731888,193828332,
	193924800,194021292,194117808,194214348,194310912,194407500,194504112,194600748,194697408,194794092,
	194890800,194987532,195084288,195181068,195277872,195374700,195471552,195568428,195665328,195762252,
	195859200,195956172,196053168,196150188,196247232,196344300,196441392,196538508,196635648,196732812,
	196830000,196927212,197024448,197121708,197218992,197316300,197413632,197510988,197608368,197705772,
	197803200,197900652,197998128,198095628,198193152,198290700,198388272,198485868,198583488,198681132,
	198778800,198876492,198974208,199071948,199169712,199267500,199365312,199463148,199561008,199658892,
	199756800,199854732,199952688,200050668,200148672,200246700,200344752,200442828,200540928,200639052,
	200737200,200835372,200933568,201031788,201130032,201228300,201326592,201424908,201523248,201621612,
	201720000,201818412,201916848,202015308,202113792,202212300,202310832,202409388,202507968,202606572,
	202705200,202803852,202902528,203001228,203099952,203198700,203297472,203396268,203495088,203593932,
	203692800,203791692,203890608,203989548,204088512,204187500,204286512,204385548,204484608,204583692,
	204682800,204781932,204881088,204980268,205079472,205178700,205277952,205377228,205476528,205575852,
	205675200,205774572,205873968,205973388,206072832,206172300,206271792,206371308,206470848,206570412,
	206670000,206769612,206869248,206968908,207068592,207168300,207268032,207367788,207467568,207567372,
	207667200,207767052,207866928,207966828,208066752,208166700,208266672,208366668,208466688,208566732,
	208666800,208766892,208867008,208967148,209067312,209167500,209267712,209367948,209468208,209568492,
	209668800,209769132,209869488,209969868,210070272,210170700,210271152,210371628,210472128,210572652,
	210673200,210773772,210874368,210974988,211075632,211176300,211276992,211377708,211478448,211579212,
	211680000,211780812,211881648,211982508,212083392,212184300,212285232,212386188,212487168,212588172,
	212689200,212790252,212891328,212992428,213093552,213194700,213295872,213397068,213498288,213599532,
	213700800,213802092,213903408,214004748,214106112,214207500,214308912,214410348,214511808,214613292,
	214714800,214816332,214917888,215019468,215121072,215222700,215324352,215426028,215527728,215629452,
	215731200,215832972,215934768,216036588,216138432,216240300,216342192,216444108,216546048,216648012,
	216750000,216852012,216954048,217056108,217158192,217260300,217362432,217464588,217566768,217668972,
	217771200,217873452,217975728,218078028,218180352,218282700,218385072,218487468,218589888,218692332,
	218794800,218897292,218999808,219102348,219204912,219307500,219410112,219512748,219615408,219718092,
	219820800,219923532,220026288,220129068,220231872,220334700,220437552,220540428,220643328,220746252,
	220849200,220952172,221055168,221158188,221261232,221364300,221467392,221570508,221673648,221776812,
	221880000,221983212,222086448,222189708,222292992,222396300,222499632,222602988,222706368,222809772,
	222913200,223016652,223120128,223223628,223327152,223430700,223534272,223637868,223741488,223845132,
	223948800,224052492,224156208,224259948,224363712,224467500,224571312,224675148,224779008,224882892,
	224986800,225090732,225194688,225298668,225402672,225506700,225610752,225714828,225818928,225923052,
	226027200,226131372,226235568,226339788,226444032,226548300,226652592,226756908,226861248,226965612,
	227070000,227174412,227278848,227383308,227487792,227592300,227696832,227801388,227905968,228010572,
	228115200,228219852,228324528,228429228,228533952,228638700,228743472,228848268,228953088,229057932,
	229162800,229267692,229372608,229477548,229582512,229687500,229792512,229897548,230002608,230107692,
	230212800,230317932,230423088,230528268,230633472,230738700,230843952,230949228,231054528,231159852,
	231265200,231370572,231475968,231581388,231686832,231792300,231897792,232003308,232108848,232214412,
	232320000,232425612,232531248,232636908,232742592,232848300,232954032,233059788,233165568,233271372,
	233377200,233483052,233588928,233694828,233800752,233906700,234012672,234118668,234224688,234330732,
	234436800,234542892,234649008,234755148,234861312,234967500,235073712,235179948,235286208,235392492,
	235498800,235605132,235711488,235817868,235924272,236030700,236137152,236243628,236350128,236456652,
	236563200,236669772,236776368,236882988,236989632,237096300,237202992,237309708,237416448,237523212,
	237630000,237736812,237843648,237950508,238057392,238164300,238271232,238378188,238485168,238592172,
	238699200,238806252,238913328,239020428,239127552,239234700,239341872,239449068,239556288,239663532,
	239770800,239878092,239985408,240092748,240200112,240307500,240414912,240522348,240629808,240737292,
	240844800,240952332,241059888,241167468,241275072,241382700,241490352,241598028,241705728,241813452,
	241921200,242028972,242136768,242244588,242352432,242460300,242568192,242676108,242784048,242892012,
	243000000,243108012,243216048,243324108,243432192,243540300,243648432,243756588,243864768,243972972,
	244081200,244189452,244297728,244406028,244514352,244622700,244731072,244839468,244947888,245056332,
	245164800,245273292,245381808,245490348,245598912,245707500,245816112,245924748,246033408,246142092,
	246250800,246359532,246468288,246577068,246685872,246794700,246903552,247012428,247121328,247230252,
	247339200,247448172,247557168,247666188,247775232,247884300,247993392,248102508,248211648,248320812,
	248430000,248539212,248648448,248757708,248866992,248976300,249085632,249194988,249304368,249413772,
	249523200,249632652,249742128,249851628,249961152,250070700,250180272,250289868,250399488,250509132,
	250618800,250728492,250838208,250947948,251057712,251167500,251277312,251387148,251497008,251606892,
	251716800,251826732,251936688,252046668,252156672,252266700,252376752,252486828,252596928,252707052,
	252817200,252927372,253037568,253147788,253258032,253368300,253478592,253588908,253699248,253809612,
	253920000,254030412,254140848,254251308,254361792,254472300,254582832,254693388,254803968,254914572,
	255025200,255135852,255246528,255357228,255467952,255578700,255689472,255800268,255911088,256021932,
	256132800,256243692,256354608,256465548,256576512,256687500,256798512,256909548,257020608,257131692,
	257242800,257353932,257465088,257576268,257687472,257798700,257909952,258021228,258132528,258243852,
	258355200,258466572,258577968,258689388,258800832,258912300,259023792,259135308,259246848,259358412,
	259470000,259581612,259693248,259804908,259916592,260028300,260140032,260251788,260363568,260475372,
	260587200,260699052,260810928,260922828,261034752,261146700,261258672,261370668,261482688,261594732,
	261706800,261818892,261931008,262043148,262155312,262267500,262379712,262491948,262604208,262716492,
	262828800,262941132,263053488,263165868,263278272,263390700,263503152,263615628,263728128,263840652,
	263953200,264065772,264178368,264290988,264403632,264516300,264628992,264741708,264854448,264967212,
	265080000,265192812,265305648,265418508,265531392,265644300,265757232,265870188,265983168,266096172,
	266209200,266322252,266435328,266548428,266661552,266774700,266887872,267001068,267114288,267227532,
	267340800,267454092,267567408,267680748,267794112,267907500,268020912,268134348,268247808,268361292,
	268474800,268588332,268701888,268815468,268929072,269042700,269156352,269270028,269383728,269497452,
	269611200,269724972,269838768,269952588,270066432,270180300,270294192,270408108,270522048,270636012,
	270750000,270864012,270978048,271092108,271206192,271320300,271434432,271548588,271662768,271776972,
	271891200,272005452,272119728,272234028,272348352,272462700,272577072,272691468,272805888,272920332,
	273034800,273149292,273263808,273378348,273492912,273607500,273722112,273836748,273951408,274066092,
	274180800,274295532,274410288,274525068,274639872,274754700,274869552,274984428,275099328,275214252,
	275329200,275444172,275559168,275674188,275789232,275904300,276019392,276134508,276249648,276364812,
	276480000,276595212,276710448,276825708,276940992,277056300,277171632,277286988,277402368,277517772,
	277633200,277748652,277864128,277979628,278095152,278210700,278326272,278441868,278557488,278673132,
	278788800,278904492,279020208,279135948,279251712,279367500,279483312,279599148,279715008,279830892,
	279946800,280062732,280178688,280294668,280410672,280526700,280642752,280758828,280874928,280991052,
	281107200,281223372,281339568,281455788,281572032,281688300,281804592,281920908,282037248,282153612,
	282270000,282386412,282502848,282619308,282735792,282852300,282968832,283085388,283201968,283318572,
	283435200,283551852,283668528,283785228,283901952,284018700,284135472,284252268,284369088,284485932,
	284602800,284719692,284836608,284953548,285070512,285187500,285304512,285421548,285538608,285655692,
	285772800,285889932,286007088,286124268,286241472,286358700,286475952,286593228,286710528,286827852,
	286945200,287062572,287179968,287297388,287414832,287532300,287649792,287767308,287884848,288002412,
	288120000,288237612,288355248,288472908,288590592,288708300,288826032,288943788,289061568,289179372,
	289297200,289415052,289532928,289650828,289768752,289886700,290004672,290122668,290240688,290358732,
	290476800,290594892,290713008,290831148,290949312,291067500,291185712,291303948,291422208,291540492,
	291658800,291777132,291895488,292013868,292132272,292250700,292369152,292487628,292606128,292724652,
	292843200,292961772,293080368,293198988,293317632,293436300,293554992,293673708,293792448,293911212,
	294030000,294148812,294267648,294386508,294505392,294624300,294743232,294862188,294981168,295100172,
	295219200,295338252,295457328,295576428,295695552,295814700,295933872,296053068,296172288,296291532,
	296410800,296530092,296649408,296768748,296888112,297007500,297126912,297246348,297365808,297485292,
	297604800,297724332,297843888,297963468,298083072,298202700,298322352,298442028,298561728,298681452,
	298801200,298920972,299040768,299160588,299280432,299400300,299520192,299640108,299760048,299880012,
	1073741824};

new punkty_gracza[33];
new zdrowie_gracza[33];
new inteligencja_gracza[33];
new wytrzymalosc_gracza[33];
new Float:redukcja_obrazen_gracza[33];
new kondycja_gracza[33];
new maksymalne_zdrowie_gracza[33];
new Float:szybkosc_gracza[33];
new grawitacja_gracza[33];

new bool:gracz_resetuje[33];

enum { NONE = 0, Johnny_Thunder, Charlie_Nader, Lucky_Luke, Chilli_NoSee, Clint_Eastwood, Warren_Olney, Billy_the_Kid, Pow_Wow_Smith };
new const zdrowie_klasy[] = { 0, 120, 140, 110, 120, 110, 100, 100, 110, 100, 75, 120, 200,100, 130, 140, 120, 130};
new const Float:szybkosc_klasy[] = {0.0, 1.2, 1.35, 1.1, 1.1, 1.5, 1.3, 1.3, 1.0, 1.55, 1.8, 2.0, 0.7, 1.5, 1.5, 1.8, 1.4, 1.3};
new const pancerz_klasy[] = { 0, 100, 100, 100, 150, 100, 0, 100, 100, 150, 0, 200, 100, 0, 100, 150, 0, 300 };
new const nazwy_klas[][] = {"Brak",
	"Johnny Thunder",
	"Charlie Nader",
	"Lucky Luke",
	"Chilli NoSee",
	"Clint Eastwood",
	"Warren Olney",
	"Billy the Kid",
	"Pow Wow Smith"
};

new const opisy_klas[][] = {"Brak",
	"Dostaje AWP, scout i deagle, 120hp bazowe, 1/3 szansy natychmiastowego zabicia noza, 110% biegu, 100 pancerza",
	"Dostaje Deagle, 140hp bazowe, Natychmiastowe zabicie z noza (prawy przycisk myszy), 135% biegu, 100 pancerza",
	"Dostaje wszystkie colty",
	"Dostaje NOZ, 100 hp bazowe, zabicie 1/1 z noza (prawy przycisk myszy)",
	"Dostaje ShootGuna, m3, szybciej biega",
	"Dostaje Scouta, XM1014",
	"Dostaje P90, 5 min i granata",
	"Dostaje 5 dynamitów, flasha i granata oraz bron"
};

new ilosc_apteczek_gracza[33];
new ilosc_rakiet_gracza[33];
new Float:poprzednia_rakieta_gracza[33];
new ilosc_min_gracza[33];
new ilosc_dynamitow_gracza[33];
new ilosc_skokow_gracza[33];
new oddaj_id[33];
new bool:dostal_przedmiot[33];

new bool:freezetime = true;
new const sound_radar[] = "Mod/radar.wav";
new g_msgHostageAdd, g_msgHostageDel, g_maxplayers;
new radar[33];
new gMaxPlayers, gMessageDeathMsg;

new const gExplodeSound[] = "weapons/rocketfire1.wav";

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	g_vault = nvault_open("WesternMod");
	
	register_think("Apteczka","ApteczkaThink");
	
	RegisterHam(Ham_TakeDamage, "player", "TakeDamage");
	RegisterHam(Ham_Spawn, "player", "Odrodzenie", 1);
	RegisterHam(Ham_Touch, "armoury_entity", "DotykBroni");
	RegisterHam(Ham_Touch, "weapon_shield", "DotykBroni");
	RegisterHam(Ham_Touch, "weaponbox", "DotykBroni");
	
	register_forward(FM_CmdStart, "CmdStart");
	register_forward(FM_EmitSound, "EmitSound");
	
	register_logevent("PoczatekRundy", 2, "1=Round_Start"); 
	register_logevent("BombaPodlozona", 3, "2=Planted_The_Bomb");
	
	register_event("SendAudio", "BombaRozbrojona", "a", "2&%!MRAD_BOMBDEF");
	register_event("BarTime", "RozbrajaBombe", "be", "1=10", "1=5");
	register_event("DeathMsg", "Death", "ade");
	register_event("Damage", "Damage", "b", "2!=0");
	register_event("CurWeapon","CurWeapon","be", "1=1");
	register_event("HLTV", "NowaRunda", "a", "1=0", "2=0");
	
	register_touch("Rocket", "*" , "DotykRakiety");
	register_touch("Mine", "player",  "DotykMiny");
	
	register_cvar("WesternMod_killxp", "4865");
	register_cvar("WesternMod_bombxp", "3845");
	register_cvar("WesternMod_hsexp", "2433"); // zamiast "2000" dodajemy własną ilość EXPA
	
	register_clcmd("say /klasa", "WybierzKlase");
	register_clcmd("say /skille", "czary");
	register_clcmd("say /klasy", "OpisKlasy");
	register_clcmd("say /przedmiot", "OpisPrzedmiotu");
	register_clcmd("say /item", "OpisPrzedmiotu");
	register_clcmd("say /drop", "WyrzucPrzedmiot");
	register_clcmd("say /wyrzuc", "WyrzucPrzedmiot");
	register_clcmd("say /daj", "OddajPrzedmiot");
	register_clcmd("say /reset", "KomendaResetujPunkty");
	register_clcmd("fullupdate", "BlokujKomende");
	
	register_clcmd("cl_autobuy", "BlokujKomende");
	register_clcmd("say /molotov", "BlokujKomende");
	register_clcmd("say molotov", "BlokujKomende");
	register_clcmd("cl_rebuy", "BlokujKomende");
	register_clcmd("cl_setautobuy","BlokujKomende");
	register_clcmd("rebuy", "BlokujKomende");
	register_clcmd("autobuy", "BlokujKomende");
	register_clcmd("glock", "BlokujKomende");
	register_clcmd("usp", "BlokujKomende");
	register_clcmd("p228", "BlokujKomende");
	register_clcmd("deagle", "BlokujKomende");
	register_clcmd("elites", "BlokujKomende");
	register_clcmd("fn57", "BlokujKomende");
	register_clcmd("m3", "BlokujKomende");
	register_clcmd("XM1014", "BlokujKomende");
	register_clcmd("mac10", "BlokujKomende");
	register_clcmd("tmp", "BlokujKomende");
	register_clcmd("mp5", "BlokujKomende");
	register_clcmd("ump45", "BlokujKomende");
	register_clcmd("p90", "BlokujKomende");
	register_clcmd("galil", "BlokujKomende");
	register_clcmd("ak47", "BlokujKomende");
	register_clcmd("scout", "BlokujKomende");
	register_clcmd("sg552", "BlokujKomende");
	register_clcmd("awp", "BlokujKomende");
	register_clcmd("g3sg1", "BlokujKomende");
	register_clcmd("famas", "BlokujKomende");
	register_clcmd("m4a1", "BlokujKomende");
	register_clcmd("bullpup", "BlokujKomende");
	register_clcmd("sg550", "BlokujKomende");
	register_clcmd("m249", "BlokujKomende");
	register_clcmd("shield", "BlokujKomende");
	register_clcmd("hegren", "BlokujKomende");
	register_clcmd("sgren", "BlokujKomende");
	register_clcmd("flash", "BlokujKomende");
	register_concmd("WesternMod_dajitem", "KomendaDajPrzedmiot", ADMIN_KICK, "<nick> <item>");
	
	
	//register_concmd("WesternMod_setlvl", "cmd_setlvl", ADMIN_KICK, "<name> <level>");
	register_concmd("WesternMod_info", "InformacjeGraczy", ADMIN_KICK, "- Wyswietla informacje o graczach")
	register_concmd("WesternMod_addexp", "cmd_addexp", ADMIN_KICK, "<name> <exp to add>");
	register_concmd("WesternMod_remexp", "cmd_remexp", ADMIN_KICK, "<name> <exp to remove>");
	
	g_msg_screenfade = get_user_msgid("ScreenFade");
	SyncHudObj = CreateHudSyncObj();
	SyncHudObj2 = CreateHudSyncObj();
	SyncHudObj3 = CreateHudSyncObj();
	doswiadczenia_za_zabojstwo = get_cvar_num("WesternMod_killxp");
	doswiadczenie_za_bombe = get_cvar_num("WesternMod_bombxp");
	doswiadczenie_za_hs = get_cvar_num("WesternMod_hsexp");
	
	set_task(30.0, "Pomoc");
	set_task(45.0, "Update");
	g_msgHostageAdd = get_user_msgid("HostagePos");
	g_msgHostageDel = get_user_msgid("HostageK");
	g_maxplayers = get_maxplayers();
	for (new i = 1; i<=g_maxplayers;i++) radar[i] = false;	
	set_task (2.0,"radar_scan",_,_,_,"b");
	
	gMaxPlayers = get_maxplayers();
	gMessageDeathMsg = get_user_msgid("DeathMsg");
	
	
}

public plugin_natives()
{
	register_library("codzik");
	
	register_native("WesternMod_add_exp", "native_WesternMod_add_exp", 1);  // Dodawanie expa.
	register_native("WesternMod_give_ritem", "native_WesternMod_give_ritem", 1);  // Losowy przedmiot.
}


public plugin_cfg() 
{	
	server_cmd("sv_maxspeed 5600");
}

public plugin_precache()
{
	sprite_white = precache_model("sprites/white.spr") ;
	sprite_blast = precache_model("sprites/dexplo.spr");
	
	precache_sound("Mod/select.wav");
	precache_sound("Mod/start.wav");
	precache_sound("Mod/start2.wav");
	precache_sound("Mod/levelup.wav");
	
	precache_model("models/w_medkit.mdl");
	precache_model("models/rpgrocket.mdl");
	precache_model("models/mine.mdl");
	precache_sound(sound_radar);
	precache_sound( gExplodeSound );
	
}

public CmdStart(id, uc_handle)
{
	if(!is_user_alive(id))
	return FMRES_IGNORED;
	
	new button = get_uc(uc_handle, UC_Buttons);
	new oldbutton = get_user_oldbutton(id);
	new flags = get_entity_flags(id);
	
	{
		if((button & IN_JUMP) && !(flags & FL_ONGROUND) && !(oldbutton & IN_JUMP) && ilosc_skokow_gracza[id] > 0)
		{
			ilosc_skokow_gracza[id]--;
			new Float:velocity[3];
			entity_get_vector(id,EV_VEC_velocity,velocity);
			velocity[2] = random_float(265.0,285.0);
			entity_set_vector(id,EV_VEC_velocity,velocity);
		}
		else if(flags & FL_ONGROUND)
		{	
			ilosc_skokow_gracza[id] = 0;
			if(informacje_przedmiotu_gracza[id][0] == 11)
			ilosc_skokow_gracza[id]++;
			
		}
	}
	
	if(button & IN_ATTACK)
	{
		new Float:punchangle[3];
		
		if(informacje_przedmiotu_gracza[id][0] == 20)
		entity_set_vector(id, EV_VEC_punchangle, punchangle);
		if(informacje_przedmiotu_gracza[id][0] == 23)
		{
			entity_get_vector(id, EV_VEC_punchangle, punchangle);
			for(new i=0; i<3;i++) 
			punchangle[i]*=0.9;
			entity_set_vector(id, EV_VEC_punchangle, punchangle);
		}
	}
	
	if(informacje_przedmiotu_gracza[id][0] == 28 && button & IN_JUMP && button & IN_DUCK && flags & FL_ONGROUND && get_gametime() > informacje_przedmiotu_gracza[id][1]+4.0)
	{
		informacje_przedmiotu_gracza[id][1] = floatround(get_gametime());
		new Float:velocity[3];
		VelocityByAim(id, 700, velocity);
		velocity[2] = random_float(265.0,285.0);
		entity_set_vector(id, EV_VEC_velocity, velocity);
	}
	
	
	return FMRES_IGNORED;
}

public Odrodzenie(id)
{
	if(!is_user_alive(id) || !is_user_connected(id))
	return PLUGIN_CONTINUE;
	
	if(nowa_klasa_gracza[id])
	{
		klasa_gracza[id] = nowa_klasa_gracza[id];
		nowa_klasa_gracza[id] = 0;
		strip_user_weapons(id);
		give_item(id, "weapon_knife");
		switch(get_user_team(id))
		{
		case 1: give_item(id, "weapon_glock18");
		case 2: give_item(id, "weapon_usp");
		}
		WczytajDane(id, klasa_gracza[id]);
	}
	
	if(!klasa_gracza[id])
	{
		WybierzKlase(id);
		return PLUGIN_CONTINUE;
	}
	
	switch(klasa_gracza[id])
	{
	case Johnny_Thunder:
		{
			give_item(id, "weapon_awp");
			give_item(id, "weapon_scout");
			give_item(id, "weapon_deagle");
		}
	case Charlie_Nader:
		{
			give_item(id, "weapon_deagle");
		}
	case Lucky_Luke:
		{
			give_item(id, "weapon_deagle");
			give_item(id, "weapon_elite");
			give_item(id, "weapon_fiveseven");
			give_item(id, "weapon_p228");
			give_item(id, "weapon_usp");
		}
	case Chilli_NoSee:
		{			
			strip_user_weapons(id);
			give_item(id, "weapon_knife");
			set_user_gravity(id, 0.7);
		}
	case Clint_Eastwood:
		{			
			give_item(id, "weapon_m3");
			give_item(id, "weapon_xm1014");
		}
	case Warren_Olney:
		{			
			give_item(id, "weapon_scout");
			give_item(id, "weapon_xm1014"); 
		}
	case Billy_the_Kid:
		{
			give_item(id, "weapon_p90");
			ilosc_min_gracza[id] = 5;
			give_item(id, "weapon_hegrenade");
		}
	case Pow_Wow_Smith:
		{
			give_item(id, "weapon_aug");
			give_item(id, "weapon_hegrenade");
			give_item(id, "weapon_flashbang");
			give_item(id, "weapon_smokegrenade");
			ilosc_dynamitow_gracza[id] = 5;
			
		}
	}
	
	if(gracz_resetuje[id])
	{
		ResetujPunkty(id);
		gracz_resetuje[id] = false;
	}
	
	if(punkty_gracza[id]>0)
	PrzydzielPunkty(id);
	
	if(informacje_przedmiotu_gracza[id][0] == 10 || informacje_przedmiotu_gracza[id][0] == 9)
	give_item(id, "weapon_hegrenade");
	
	if(informacje_przedmiotu_gracza[id][0] == 9)
	ZmienUbranie(id, 0);
	
	if(informacje_przedmiotu_gracza[id][0] == 38)
	set_user_maxspeed (id, 10000.0)
	
	if(informacje_przedmiotu_gracza[id][0] == 1)
	set_user_footsteps(id, 1);
	else
	set_user_footsteps(id, 0);
	
	if(informacje_przedmiotu_gracza[id][0] == 13)
	give_item(id, "weapon_awp");
	
	if(informacje_przedmiotu_gracza[id][0] == 37)
	give_item(id, "weapon_awp");
	
	if(informacje_przedmiotu_gracza[id][0] == 35)
	give_item(id, "weapon_scout");
	
	if(informacje_przedmiotu_gracza[id][0] == 42)
	give_item(id, "weapon_m3");
	
	if(informacje_przedmiotu_gracza[id][0] == 36)
	give_item(id, "weapon_deagle");
	
	if(informacje_przedmiotu_gracza[id][0] == 19)
	informacje_przedmiotu_gracza[id][1] = 1;
	
	if(informacje_przedmiotu_gracza[id][0] == 27)
	informacje_przedmiotu_gracza[id][1] = 3;
	
	new weapons[32];
	new weaponsnum;
	get_user_weapons(id, weapons, weaponsnum);
	for(new i=0; i<weaponsnum; i++)
	if(is_user_alive(id))
	if(maxAmmo[weapons[i]] > 0)
	cs_set_user_bpammo(id, weapons[i], maxAmmo[weapons[i]]);
	
	redukcja_obrazen_gracza[id] = (47.3057*(1.0-floatpower( 2.7182, -0.06798*float(wytrzymalosc_gracza[id])))/100);
	maksymalne_zdrowie_gracza[id] = zdrowie_klasy[klasa_gracza[id]]+zdrowie_gracza[id]*2;
	szybkosc_gracza[id] = (STANDARDOWA_SZYBKOSC*szybkosc_klasy[klasa_gracza[id]])+(float(kondycja_gracza[id])*1.3);
	
	if(informacje_przedmiotu_gracza[id][0] == 18)
	{
		maksymalne_zdrowie_gracza[id] += 100;
		szybkosc_gracza[id] -= 0.4;
	}
	
	if(informacje_przedmiotu_gracza[id][0] == 25)
	{
		maksymalne_zdrowie_gracza[id] += 50;
		szybkosc_gracza[id] -= 0.3;
	}
	
	if(informacje_przedmiotu_gracza[id][0] == 33)
	{
		set_user_gravity(id, 0.5);
	}
	
	if(informacje_przedmiotu_gracza[id][0] == 34)
	{
		set_user_rendering(id, kRenderFxNone, 0, 0, 0, kRenderTransAlpha, 0);
		set_user_health (id, 15)
	}
	
	if(informacje_przedmiotu_gracza[id][0] == 39)
	{
		informacje_przedmiotu_gracza[id][1] = 39;
	}
	
	if(informacje_przedmiotu_gracza[id][0] == 40)
	{
		informacje_przedmiotu_gracza[id][1] = 40;
	}
	
	if(informacje_przedmiotu_gracza[id][0] == 45)
	{
		cs_set_user_money (id , 10000, 1) 
	}
	
	set_user_armor(id, pancerz_klasy[klasa_gracza[id]]);
	set_user_health(id, maksymalne_zdrowie_gracza[id]);
	if(informacje_przedmiotu_gracza[id][0] == 17)
	set_user_armor(id, 500);
	
	return PLUGIN_CONTINUE;
}

public PoczatekRundy()	
{
	freezetime = false;
	for(new id=0;id<=32;id++)
	{
		if(!is_user_alive(id))
		continue;
		
		set_task(0.1, "UstawSzybkosc", id+ZADANIE_USTAW_SZYBKOSC);
		
		switch(get_user_team(id))
		{
		case 1: client_cmd(id, "spk Mod/start");
		case 2: client_cmd(id, "spk Mod/start2");
		}
	}
}

public NowaRunda()
{
	freezetime = true;
	new iEnt = find_ent_by_class(-1, "Mine");
	while(iEnt > 0) 
	{
		remove_entity(iEnt);
		iEnt = find_ent_by_class(iEnt, "Mine");	
	}
}

public TakeDamage(this, idinflictor, idattacker, Float:damage, damagebits)
{
	if(!is_user_alive(this) || !is_user_connected(this) || informacje_przedmiotu_gracza[this][0] == 24 || !is_user_connected(idattacker) || get_user_team(this) == get_user_team(idattacker) || !klasa_gracza[idattacker])
	return HAM_IGNORED;
	
	new health = get_user_health(this);
	new weapon = get_user_weapon(idattacker);
	
	if(health < 2)
	return HAM_IGNORED;
	
	if(informacje_przedmiotu_gracza[this][0] == 27 && informacje_przedmiotu_gracza[this][1]>0)
	{
		informacje_przedmiotu_gracza[this][1]--;
		return HAM_SUPERCEDE;
	}
	
	if(wytrzymalosc_gracza[this]>0)
	damage -= redukcja_obrazen_gracza[this]*damage;
	
	if(informacje_przedmiotu_gracza[this][0] == 2 || informacje_przedmiotu_gracza[this][0] == 3)
	damage-=(float(informacje_przedmiotu_gracza[this][1])<damage)? float(informacje_przedmiotu_gracza[this][1]): damage;
	
	if(informacje_przedmiotu_gracza[idattacker][0] == 5 && !UTIL_In_FOV(this, idattacker) && UTIL_In_FOV(idattacker, this))
	damage*=2.0;
	
	if(informacje_przedmiotu_gracza[idattacker][0] == 10)
	damage+=informacje_przedmiotu_gracza[idattacker][1];
	
	if(informacje_przedmiotu_gracza[this][0] == 12)
	damage-=(5.0<damage)? 5.0: damage;
	
	if(informacje_przedmiotu_gracza[this][0] == 44)
	damage-=(50.0<damage)? 50.0: damage;
	
	if(weapon == CSW_AWP && informacje_przedmiotu_gracza[idattacker][0] == 13)
	damage=float(health);
	
	
	
	
	if(weapon == CSW_SCOUT && informacje_przedmiotu_gracza[idattacker][0] == 35)
	damage=float(health);
	
	if(weapon == CSW_M3 && informacje_przedmiotu_gracza[idattacker][0] == 42)
	damage=float(health);
	
	if(informacje_przedmiotu_gracza[idattacker][0] == 21)
	damage+=10;
	
	if(informacje_przedmiotu_gracza[idattacker][0] == 22)
	damage+=20;
	
	if(idinflictor != idattacker && entity_get_int(idinflictor, EV_INT_movetype) != 5)
	{
		if((informacje_przedmiotu_gracza[idattacker][0] == 9 && random_num(1, informacje_przedmiotu_gracza[idattacker][1]) == 1) || informacje_przedmiotu_gracza[idattacker][0] == 10)
		damage = float(health);	
	}
	
	if(informacje_przedmiotu_gracza[idattacker][0] == 41)
	damage*=2.0;
	
	if(weapon == CSW_KNIFE || damagebits & DMG_SLASH)
	{
		if(informacje_przedmiotu_gracza[this][0] == 4)
		damage=damage*1.4+inteligencja_gracza[idattacker];
		if((informacje_przedmiotu_gracza[idattacker][0] == 8 || (klasa_gracza[idattacker] == Johnny_Thunder && random(2) == 2) || klasa_gracza[idattacker] == Charlie_Nader) && !(get_user_button(idattacker) & IN_ATTACK))
		damage = float(health);
	}
	
	if(weapon == CSW_DEAGLE && informacje_przedmiotu_gracza[idattacker][0] == 36)
	damage*=2.0;
	
	if(weapon == CSW_AWP && informacje_przedmiotu_gracza[idattacker][0] == 37)
	damage*=2.0;
	
	if(informacje_przedmiotu_gracza[this][0] == 26 && random_num(1, informacje_przedmiotu_gracza[this][1]) == 1)
	{
		SetHamParamEntity(3, this);
		SetHamParamEntity(1, idattacker);
	}
	
	if(CSW_KNIFE && informacje_przedmiotu_gracza[idattacker][0] == 30)
	damage += 200;
	
	SetHamParamFloat(4, damage);
	return HAM_IGNORED;
}

public Damage(id)
{
	new attacker = get_user_attacker(id);
	new damage = read_data(2);
	if(!is_user_alive(attacker) || !is_user_connected(attacker) || id == attacker || !klasa_gracza[attacker])
	return PLUGIN_CONTINUE;
	
	if(informacje_przedmiotu_gracza[attacker][0] == 12 && random_num(1, informacje_przedmiotu_gracza[id][1]) == 1)
	Display_Fade(id,1<<14,1<<14 ,1<<16,255,155,50,230);
	
	if(get_user_team(id) != get_user_team(attacker))
	{
		while(damage>20)
		{
			damage-=20;
			doswiadczenie_gracza[attacker]++;
		}
	}
	SprawdzPoziom(attacker);
	return PLUGIN_CONTINUE;
}

public Death()
{
	new id = read_data(2);
	new attacker = read_data(1);
	
	if(!is_user_alive(attacker) || !is_user_connected(attacker))
	return PLUGIN_CONTINUE;
	
	new weapon = get_user_weapon(attacker);
	new zdrowie = get_user_health(attacker);
	
	if(get_user_team(id) != get_user_team(attacker) && klasa_gracza[attacker])
	{
		new nowe_doswiadczenie = 0;
		
		nowe_doswiadczenie += doswiadczenia_za_zabojstwo;
		
		nowe_doswiadczenie += doswiadczenia_za_zabojstwo*2;
		
		if(poziom_gracza[id] > poziom_gracza[attacker])
		nowe_doswiadczenie += poziom_gracza[id] - poziom_gracza[attacker];
		
		
		
		new nowe_zdrowie = (zdrowie+20<maksymalne_zdrowie_gracza[attacker])? zdrowie+20: maksymalne_zdrowie_gracza[attacker];
		set_user_clip(attacker, maxClip[weapon]);
		set_user_health(attacker, nowe_zdrowie);
		
		#if defined BOTY
		if(is_user_bot2(attacker) && random(9) == 0)
		WyrzucPrzedmiot(id);
		#endif
		if(!informacje_przedmiotu_gracza[attacker][0])
		DajPrzedmiot(attacker, random_num(1, sizeof nazwy_przedmiotow-1));
		
		if(informacje_przedmiotu_gracza[attacker][0] == 14)
		{
			new nowe_zdrowie = (zdrowie+50<maksymalne_zdrowie_gracza[attacker])? zdrowie+50: maksymalne_zdrowie_gracza[attacker];
			set_user_health(attacker, nowe_zdrowie);
		}
		if(informacje_przedmiotu_gracza[id][1] == 31)
		{
			nowe_doswiadczenie += doswiadczenia_za_zabojstwo*2
		}
		
		if(weapon == CSW_KNIFE && informacje_przedmiotu_gracza[id][1] == 43)
		{
			nowe_doswiadczenie += doswiadczenia_za_zabojstwo*2
		}
		
		set_hudmessage(255, 212, 0, 0.50, 0.33, 1, 6.0, 4.0);
		ShowSyncHudMsg(attacker, SyncHudObj2, "+%i", nowe_doswiadczenie);
		
		doswiadczenie_gracza[attacker] += nowe_doswiadczenie;
		
	}
	
	SprawdzPoziom(attacker);
	
	if(informacje_przedmiotu_gracza[id][0] == 7 && random_num(1, informacje_przedmiotu_gracza[id][1]) == 1)
	set_task(0.1, "Wskrzes", id+ZADANIE_WSKRZES);
	
	new iKiller = read_data( 1 );
	new iVictim = read_data( 2 );
	
	new szWeapon[ 30 ];
	read_data( 4, szWeapon, charsmax( szWeapon ) );
	
	if( iVictim == iKiller )
	{
		return PLUGIN_CONTINUE;
	}
	
	
	
	return PLUGIN_CONTINUE;
}

public client_connect(id)
{
	//resetuje umiejetnosci
	klasa_gracza[id] = 0;
	poziom_gracza[id] = 0;
	doswiadczenie_gracza[id] = 0;
	punkty_gracza[id] = 0;
	zdrowie_gracza[id] = 0;
	inteligencja_gracza[id] = 0;
	wytrzymalosc_gracza[id] = 0;
	kondycja_gracza[id] = 0;
	maksymalne_zdrowie_gracza[id] = 0;
	szybkosc_gracza[id] = 0.0;
	
	
	get_user_name(id, nazwa_gracza[id], 63);
	
	remove_task(id+ZADANIE_POKAZ_INFORMACJE);
	remove_task(id+ZADANIE_POKAZ_REKLAME);	
	remove_task(id+ZADANIE_POKAZ_REKLAMEE);
	remove_task(id+ZADANIE_USTAW_SZYBKOSC);
	remove_task(id+ZADANIE_WSKRZES);
	remove_task(id+ZADANIE_WYSZKOLENIE_SANITARNE);
	remove_task(id+ZADANIE_MARYCHA);
	
	set_task(10.0, "PokazReklame", id+ZADANIE_POKAZ_REKLAME);
	set_task(15.0, "PokazReklamee", id+ZADANIE_POKAZ_REKLAMEE);
	set_task(3.0, "PokazInformacje", id+ZADANIE_POKAZ_INFORMACJE);
	
	//resetuje przedmioty
	UsunPrzedmiot(id);
}

public client_disconnect(id)
{
	remove_task(id+ZADANIE_POKAZ_INFORMACJE);
	remove_task(id+ZADANIE_POKAZ_REKLAME);	
	remove_task(id+ZADANIE_POKAZ_REKLAMEE);	
	remove_task(id+ZADANIE_USTAW_SZYBKOSC);
	remove_task(id+ZADANIE_WSKRZES);
	remove_task(id+ZADANIE_WYSZKOLENIE_SANITARNE);
	remove_task(id+ZADANIE_MARYCHA);
	
	ZapiszDane(id);
	UsunPrzedmiot(id);
}

public RozbrajaBombe(id)
if(klasa_gracza[id])
rozbrajajacy = id;

public BombaPodlozona()
{
	new Players[32], playerCount, id;
	get_players(Players, playerCount, "aeh", "TERRORIST");
	
	if(get_playersnum() > 1)
	{
		doswiadczenie_gracza[podkladajacy] += doswiadczenie_za_bombe;
		for (new i=0; i<playerCount; i++) 
		{
			id = Players[i];
			if(!klasa_gracza[id])
			continue;
			
			if(id != podkladajacy)
			{
				doswiadczenie_gracza[id] += doswiadczenia_za_zabojstwo;
				ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Dostales %i doswiadczenia za podlozenie bomby przez twoj team.", doswiadczenia_za_zabojstwo);
				
			}
			else
			{
				ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Dostales %i doswiadczenia za podlozenie bomby.", doswiadczenie_za_bombe);
			}
			SprawdzPoziom(id);
		}
	}
}

public BombaRozbrojona()
{
	new Players[32], playerCount, id;
	get_players(Players, playerCount, "aeh", "CT");
	
	doswiadczenie_gracza[rozbrajajacy] += doswiadczenie_za_bombe;
	for (new i=0; i<playerCount; i++) 
	{
		id = Players[i];
		if(!klasa_gracza[id])
		continue;
		if(id != rozbrajajacy)
		{
			doswiadczenie_gracza[id]+= doswiadczenia_za_zabojstwo;
			ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Dostales %i doswiadczenia za rozbrojenie bomby przez twoj team.", doswiadczenia_za_zabojstwo);
		}
		else
		ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Dostales %i doswiadczenia za rozbrojenie bomby.",doswiadczenie_za_bombe);
		SprawdzPoziom(id);
	}
}

public OpisKlasy(id)
{
	new menu = menu_create("Wybierz klase:", "OpisKlasy_Handle");
	for(new i=1; i<sizeof nazwy_klas; i++)
	menu_additem(menu, nazwy_klas[i]);
	menu_setprop(menu, MPROP_EXITNAME, "Wyjdz");
	menu_setprop(menu, MPROP_BACKNAME, "Poprzednia strona");
	menu_setprop(menu, MPROP_NEXTNAME, "Nastepna strona");
	menu_display(id, menu);
	
	client_cmd(id, "spk Mod/select");
}

public OpisKlasy_Handle(id, menu, item)
{
	client_cmd(id, "spk Mod/select");
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03%s: %s", nazwy_klas[item+1], opisy_klas[item+1]);
	menu_display(id, menu);
	
	return PLUGIN_CONTINUE;
}

public WybierzKlase(id)
{
	new menu = menu_create("Wybierz klase:", "WybierzKlase_Handle");
	new klasa[50];
	for(new i=1; i<sizeof nazwy_klas; i++)
	{
		WczytajDane(id, i);
		format(klasa, 49, "%s \yPoziom: %i", nazwy_klas[i], poziom_gracza[id]);
		menu_additem(menu, klasa);
	}
	
	WczytajDane(id, klasa_gracza[id]);
	
	menu_setprop(menu, MPROP_EXITNAME, "Wyjdz");
	menu_setprop(menu, MPROP_BACKNAME, "Poprzednia strona");
	menu_setprop(menu, MPROP_NEXTNAME, "Nastepna strona");
	menu_display(id, menu);
	
	client_cmd(id, "spk Mod/select");
	#if defined BOTY
	if(is_user_bot2(id))
	WybierzKlase_Handle(id, menu, random(sizeof nazwy_klas-1));
	#endif
}

public WybierzKlase_Handle(id, menu, item)
{
	client_cmd(id, "spk Mod/select");
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}	
	
	item++;
	
	if(item == klasa_gracza[id]){
		WybierzKlase(id);
		return PLUGIN_CONTINUE;
	}

	if(klasa_gracza[id])
	{
		nowa_klasa_gracza[id] = item;
		ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Klasa zostanie zmieniona w nastepnej rundzie.");
	}
	else
	{
		klasa_gracza[id] = item;
		WczytajDane(id, klasa_gracza[id]);
		Odrodzenie(id);
	}
	return PLUGIN_CONTINUE;
}

public PrzydzielPunkty(id)
{
	new inteligencja[65];
	new zdrowie[60];
	new wytrzymalosc[60];
	new kondycja[60];
	new tytul[25];
	format(inteligencja, 64, "Inteligencja: \r%i \y(Zwieksza obrazenia zadawane przedmiotami)", inteligencja_gracza[id]);
	format(zdrowie, 59, "Zycie: \r%i \y(Zwieksza zycie)", zdrowie_gracza[id]);
	format(wytrzymalosc, 59, "Wytrzymalosc: \r%i \y(Zmniejsza obrazenia)", wytrzymalosc_gracza[id]);
	format(kondycja, 59, "Kondycja: \r%i \y(Zwieksza tempo chodu)", kondycja_gracza[id]);
	new grawitacja[60];
	format(grawitacja, 59, "Grawitacja: \r%i \y(Zmniejsza grawitacje)", grawitacja_gracza[id]);
	format(tytul, 24, "Przydziel Punkty(%i):", punkty_gracza[id]);
	new menu = menu_create(tytul, "PrzydzielPunkty_Handler");
	menu_additem(menu, inteligencja);
	menu_additem(menu, zdrowie);
	menu_additem(menu, wytrzymalosc);
	menu_additem(menu, kondycja);
	menu_additem(menu, grawitacja);
	menu_display(id, menu);
#if defined BOTY
	if(is_user_bot2(id))
	PrzydzielPunkty_Handler(id, menu, random(4));
	#endif
}
public PrzydzielPunkty_Handler(id, menu, item)
{
	client_cmd(id, "spk Mod/select");
	
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_CONTINUE;
	}
	
	switch(item) 
	{ 
	case 0: 
		{       
			if(inteligencja_gracza[id]<1250)
			inteligencja_gracza[id]++;
			else 
			ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Maxymalny poziom inteligencji osiagniety");
			
		}
	case 1: 
		{       
			if(zdrowie_gracza[id]<1250)
			zdrowie_gracza[id]++;
			else 
			ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Maxymalny poziom sily osiagniety");
		}
	case 2: 
		{       
			if(wytrzymalosc_gracza[id]<1250)
			wytrzymalosc_gracza[id]++;
			else 
			ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Maxymalny poziom zrecznosci osiagniety");
			
		}
	case 3: 
		{       
			if(kondycja_gracza[id]<1250)
			kondycja_gracza[id]++;
			else 
			ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Maxymalny poziom zwinnosci osiagniety");
		}
	case 4: 
		{       
			if(grawitacja_gracza[id]<101)
			grawitacja_gracza[id]++;
			else 
			ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Maxymalny poziom grawitacji osiagniety");
		}
	}
	
	punkty_gracza[id]--;
	
	if(punkty_gracza[id]>0)
	PrzydzielPunkty(id);
	
	return PLUGIN_CONTINUE;
	
}

public ResetujPunkty(id)
{	
	punkty_gracza[id] = poziom_gracza[id]*2-2;
	inteligencja_gracza[id] = 0;
	zdrowie_gracza[id] = 0;
	kondycja_gracza[id] = 0;
	grawitacja_gracza[id] = 0;
	wytrzymalosc_gracza[id] = 0;
}

public KomendaResetujPunkty(id)
{	
	ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Umiejetnosci zostana zresetowane w nastepnej rundzie.");
	client_cmd(id, "spk Mod/select");
	gracz_resetuje[id] = true;
}

public WyszkolenieSanitarne(id)
{
	id -= ZADANIE_WYSZKOLENIE_SANITARNE;
	if(informacje_przedmiotu_gracza[id][0] != 16)
	return PLUGIN_CONTINUE;
	set_task(5.0, "WyszkolenieSanitarne", id+ZADANIE_WYSZKOLENIE_SANITARNE);
	if(!is_user_alive(id))
	return PLUGIN_CONTINUE;
	new health = get_user_health(id);
	new new_health = (health+10<maksymalne_zdrowie_gracza[id])?health+10:maksymalne_zdrowie_gracza[id];
	set_user_health(id, new_health);
	return PLUGIN_CONTINUE;
}


public StworzApteczke(id)
{
	if (!ilosc_apteczek_gracza[id])
	{
		client_print(id, print_center, "Masz tylko 2 apteczki na runde!");
		return PLUGIN_CONTINUE;
	}
	
	if(inteligencja_gracza[id] < 1)
	client_print(id, print_center, "Aby wzmocnic apteczke, zwieksz inteligencje!");
	
	ilosc_apteczek_gracza[id]--;
	
	new Float:origin[3];
	entity_get_vector(id, EV_VEC_origin, origin);
	
	new ent = create_entity("info_target");
	entity_set_string(ent, EV_SZ_classname, "Apteczka");
	entity_set_edict(ent, EV_ENT_owner, id);
	entity_set_int(ent, EV_INT_solid, SOLID_NOT);
	entity_set_vector(ent, EV_VEC_origin, origin);
	entity_set_float(ent, EV_FL_ltime, halflife_time() + 7 + 0.1);
	
	
	entity_set_model(ent, "models/w_medkit.mdl");
	set_rendering ( ent, kRenderFxGlowShell, 255,0,0, kRenderFxNone, 255 ) 	;
	drop_to_floor(ent);
	
	entity_set_float(ent, EV_FL_nextthink, halflife_time() + 0.1);
	
	return PLUGIN_CONTINUE;
}

public ApteczkaThink(ent)
{
	new id = entity_get_edict(ent, EV_ENT_owner);
	new totem_dist = 300;
	new totem_heal = 5+floatround(inteligencja_gracza[id]*0.5);
	if (entity_get_edict(ent, EV_ENT_euser2) == 1)
	{		
		new Float:forigin[3], origin[3];
		entity_get_vector(ent, EV_VEC_origin, forigin);
		FVecIVec(forigin,origin);
		
		new entlist[33];
		new numfound = find_sphere_class(0,"player",totem_dist+0.0,entlist, 32,forigin);
		
		for (new i=0; i < numfound; i++)
		{		
			new pid = entlist[i];
			
			if (get_user_team(pid) != get_user_team(id))
			continue;
			
			new zdrowie = get_user_health(pid);
			new nowe_zdrowie = (zdrowie+totem_heal<maksymalne_zdrowie_gracza[pid])?zdrowie+totem_heal:maksymalne_zdrowie_gracza[pid];
			if (is_user_alive(pid)) set_user_health(pid, nowe_zdrowie);		
		}
		
		entity_set_edict(ent, EV_ENT_euser2, 0);
		entity_set_float(ent, EV_FL_nextthink, halflife_time() + 1.5);
		
		return PLUGIN_CONTINUE;
	}
	
	if (entity_get_float(ent, EV_FL_ltime) < halflife_time() || !is_user_alive(id))
	{
		remove_entity(ent);
		return PLUGIN_CONTINUE;
	}
	
	if (entity_get_float(ent, EV_FL_ltime)-2.0 < halflife_time())
	set_rendering ( ent, kRenderFxNone, 255,255,255, kRenderTransAlpha, 100 ) ;
	
	new Float:forigin[3], origin[3];
	entity_get_vector(ent, EV_VEC_origin, forigin);
	FVecIVec(forigin,origin);
	
	//Find people near and give them health
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY, origin );
	write_byte( TE_BEAMCYLINDER );
	write_coord( origin[0] );
	write_coord( origin[1] );
	write_coord( origin[2] );
	write_coord( origin[0] );
	write_coord( origin[1] + totem_dist );
	write_coord( origin[2] + totem_dist );
	write_short( sprite_white );
	write_byte( 0 ); // startframe
	write_byte( 0 ); // framerate
	write_byte( 10 ); // life
	write_byte( 10 ); // width
	write_byte( 255 ); // noise
	write_byte( 255 ); // noise
	write_byte( 255 ); // r, g, b
	write_byte( 100 );// r, g, b
	write_byte( 100 ); // r, g, b
	write_byte( 128 ); // brightness
	write_byte( 5 ); // speed
	message_end();
	
	entity_set_edict(ent, EV_ENT_euser2 ,1);
	entity_set_float(ent, EV_FL_nextthink, halflife_time() + 0.5);
	
	
	return PLUGIN_CONTINUE;
	
}

public StworzRakiete(id)
{
	if (!ilosc_rakiet_gracza[id])
	{
		client_print(id, print_center, "Wykrzystales juz wszystkie rakiety!");
		return PLUGIN_CONTINUE;
	}
	
	if(poprzednia_rakieta_gracza[id] + 2.0 > get_gametime())
	{
		client_print(id, print_center, "Rakiet mozesz uzywac co 2 sekundy!");
		return PLUGIN_CONTINUE;
	}
	
	if (is_user_alive(id))
	{	
		if(inteligencja_gracza[id] < 1)
		client_print(id, print_center, "Aby wzmocnic rakiete, zwieksz inteligencje!");
		
		poprzednia_rakieta_gracza[id] = get_gametime();
		ilosc_rakiet_gracza[id]--;
		
		new Float: Origin[3], Float: vAngle[3], Float: Velocity[3];
		
		entity_get_vector(id, EV_VEC_v_angle, vAngle);
		entity_get_vector(id, EV_VEC_origin , Origin);
		
		new Ent = create_entity("info_target");
		
		entity_set_string(Ent, EV_SZ_classname, "Rocket");
		entity_set_model(Ent, "models/rpgrocket.mdl");
		
		vAngle[0] *= -1.0;
		
		entity_set_origin(Ent, Origin);
		entity_set_vector(Ent, EV_VEC_angles, vAngle);
		
		entity_set_int(Ent, EV_INT_effects, 2);
		entity_set_int(Ent, EV_INT_solid, SOLID_BBOX);
		entity_set_int(Ent, EV_INT_movetype, MOVETYPE_FLY);
		entity_set_edict(Ent, EV_ENT_owner, id);
		
		VelocityByAim(id, 1000 , Velocity);
		entity_set_vector(Ent, EV_VEC_velocity ,Velocity);
	}	
	return PLUGIN_CONTINUE;
}

public PolozDynamit(id)
{
	if(!ilosc_dynamitow_gracza[id])
	{
		client_print(id, print_center, "Wykorzystales juz caly dynamit!");
		return PLUGIN_CONTINUE;
	}
	
	if(inteligencja_gracza[id] < 1)
	client_print(id, print_center, "Aby wzmocnic dynamit, zwieksz inteligencje!");
	
	ilosc_dynamitow_gracza[id]--;
	new Float:fOrigin[3], iOrigin[3];
	entity_get_vector( id, EV_VEC_origin, fOrigin);
	iOrigin[0] = floatround(fOrigin[0]);
	iOrigin[1] = floatround(fOrigin[1]);
	iOrigin[2] = floatround(fOrigin[2]);
	
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
	write_byte(TE_EXPLOSION);
	write_coord(iOrigin[0]);
	write_coord(iOrigin[1]);
	write_coord(iOrigin[2]);
	write_short(sprite_blast);
	write_byte(32);
	write_byte(20);
	write_byte(0);
	message_end();
	
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY, iOrigin );
	write_byte( TE_BEAMCYLINDER );
	write_coord( iOrigin[0] );
	write_coord( iOrigin[1] );
	write_coord( iOrigin[2] );
	write_coord( iOrigin[0] );
	write_coord( iOrigin[1] + 300 );
	write_coord( iOrigin[2] + 300 );
	write_short( sprite_white );
	write_byte( 0 ); // startframe
	write_byte( 0 ); // framerate
	write_byte( 10 ); // life
	write_byte( 10 ); // width
	write_byte( 255 ); // noise
	write_byte( 255 ); // r, g, b
	write_byte( 100 );// r, g, b
	write_byte( 100 ); // r, g, b
	write_byte( 128 ); // brightness
	write_byte( 8 ); // speed
	message_end();
	
	new entlist[33];
	new numfound = find_sphere_class(id, "player", 300.0 , entlist, 32);
	
	for (new i=0; i < numfound; i++)
	{		
		new pid = entlist[i];
		
		if (!is_user_alive(pid) || get_user_team(id) == get_user_team(pid) || informacje_przedmiotu_gracza[pid][0] == 24)
		continue;
		ExecuteHam(Ham_TakeDamage, pid, 0, id, 90.0+float(inteligencja_gracza[id]) , 1);
	}
	return PLUGIN_CONTINUE;
}

public PostawMine(id)
{
	if (!ilosc_min_gracza[id])
	{
		client_print(id, print_center, "Wykorzystales juz wszystkie miny!");
		return PLUGIN_CONTINUE;
	}
	
	if(inteligencja_gracza[id] < 1)
	client_print(id, print_center, "Aby wzmocnic miny, zwieksz inteligencje!");
	
	ilosc_min_gracza[id]--;
	
	new Float:origin[3];
	entity_get_vector(id, EV_VEC_origin, origin);
	
	new ent = create_entity("info_target");
	entity_set_string(ent ,EV_SZ_classname, "Mine");
	entity_set_edict(ent ,EV_ENT_owner, id);
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_TOSS);
	entity_set_origin(ent, origin);
	entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
	
	entity_set_model(ent, "models/mine.mdl");
	entity_set_size(ent,Float:{-16.0,-16.0,0.0},Float:{16.0,16.0,2.0});
	
	drop_to_floor(ent);
	
	entity_set_float(ent,EV_FL_nextthink,halflife_time() + 0.01) ;
	
	set_rendering(ent,kRenderFxNone, 0,0,0, kRenderTransTexture,50)	;
	
	
	return PLUGIN_CONTINUE;
}

public DotykMiny(ent, id)
{
	new attacker = entity_get_edict(ent, EV_ENT_owner);
	if (get_user_team(attacker) != get_user_team(id))
	{
		new Float:fOrigin[3], iOrigin[3];
		entity_get_vector( ent, EV_VEC_origin, fOrigin);
		iOrigin[0] = floatround(fOrigin[0]);
		iOrigin[1] = floatround(fOrigin[1]);
		iOrigin[2] = floatround(fOrigin[2]);
		
		message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
		write_byte(TE_EXPLOSION);
		write_coord(iOrigin[0]);
		write_coord(iOrigin[1]);
		write_coord(iOrigin[2]);
		write_short(sprite_blast);
		write_byte(32); // scale
		write_byte(20); // framerate
		write_byte(0);// flags
		message_end();
		new entlist[33];
		new numfound = find_sphere_class(ent,"player", 90.0 ,entlist, 32);
		
		for (new i=0; i < numfound; i++)
		{		
			new pid = entlist[i];
			
			if (!is_user_alive(pid) || get_user_team(attacker) == get_user_team(pid) || informacje_przedmiotu_gracza[pid][0] == 24 || klasa_gracza[id] == Chilli_NoSee)
			continue;
			
			ExecuteHam(Ham_TakeDamage, pid, ent, attacker, 90.0+float(inteligencja_gracza[attacker]) , 1);
		}
		remove_entity(ent);
	}
}

public DotykRakiety(ent)
{
	if ( !is_valid_ent(ent))
	return;
	
	new attacker = entity_get_edict(ent, EV_ENT_owner);
	
	new Float:fOrigin[3], iOrigin[3];
	entity_get_vector( ent, EV_VEC_origin, fOrigin);	
	iOrigin[0] = floatround(fOrigin[0]);
	iOrigin[1] = floatround(fOrigin[1]);
	iOrigin[2] = floatround(fOrigin[2]);
	
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY, iOrigin);
	write_byte(TE_EXPLOSION);
	write_coord(iOrigin[0]);
	write_coord(iOrigin[1]);
	write_coord(iOrigin[2]);
	write_short(sprite_blast);
	write_byte(32); // scale
	write_byte(20); // framerate
	write_byte(0);// flags
	message_end();
	
	new entlist[33];
	new numfound = find_sphere_class(ent, "player", 230.0, entlist, 32);
	
	for (new i=0; i < numfound; i++)
	{		
		new pid = entlist[i];
		
		if (!is_user_alive(pid) || get_user_team(attacker) == get_user_team(pid) || informacje_przedmiotu_gracza[pid][0] == 24)
		continue;
		ExecuteHam(Ham_TakeDamage, pid, ent, attacker, 55.0+float(inteligencja_gracza[attacker]) , 1);
	}
	remove_entity(ent);
}	

public CurWeapon(id)
{
	if(freezetime || !klasa_gracza[id])
	return PLUGIN_CONTINUE;
	
	new weapon = read_data(2);
	
	UstawSzybkosc(id);
	
	if(weapon == CSW_C4)
	podkladajacy = id;
	
	if(informacje_przedmiotu_gracza[id][0] == 34)
	{
		set_user_rendering(id, kRenderFxNone, 0, 0, 0, kRenderTransAlpha, 0);
		set_user_health (id, 15)
	}
	
	return PLUGIN_CONTINUE;
}

public EmitSound(id, iChannel, szSound[], Float:fVol, Float:fAttn, iFlags, iPitch ) 
{
	if(equal(szSound, "common/wpn_denyselect.wav"))
	{
		UzyjPrzedmiotu(id);
		return FMRES_SUPERCEDE;
	}
	
	return FMRES_IGNORED;
}

public UzyjPrzedmiotu(id)
{
	if(informacje_przedmiotu_gracza[id][0] == 19 && informacje_przedmiotu_gracza[id][1]>0) 
	{
		set_user_health(id, maksymalne_zdrowie_gracza[id]);
		informacje_przedmiotu_gracza[id][1]--;
	}
	
	if(informacje_przedmiotu_gracza[id][0] == 39 && informacje_przedmiotu_gracza[id][1]>0) 
	{
		set_task(0.1,"godon",id,"",0,"a",1);
		informacje_przedmiotu_gracza[id][1]--;
	}
	
	if(informacje_przedmiotu_gracza[id][0] == 40 && informacje_przedmiotu_gracza[id][1]>0) 
	{
		set_task(0.1,"clipon",id,"",0,"a",1);
		informacje_przedmiotu_gracza[id][1]--;
	}
	
	if(ilosc_apteczek_gracza[id]>0)
	StworzApteczke(id);
	if(ilosc_rakiet_gracza[id]>0)
	StworzRakiete(id);
	if(ilosc_min_gracza[id]>0)
	PostawMine(id);
	if(ilosc_dynamitow_gracza[id]>0)
	PolozDynamit(id);
	
	return PLUGIN_HANDLED;
}

public ZapiszDane(id)
{
	new vaultkey[64],vaultdata[256];
	format(vaultkey,63,"%s-%i-WesternMod", nazwa_gracza[id], klasa_gracza[id]);
	format(vaultdata,255,"%i#%i#%i#%i#%i#%i#%i", doswiadczenie_gracza[id], poziom_gracza[id], inteligencja_gracza[id], zdrowie_gracza[id], wytrzymalosc_gracza[id], kondycja_gracza[id], grawitacja_gracza[id]);
	nvault_set(g_vault,vaultkey,vaultdata);
}

public WczytajDane(id, klasa)
{
	new vaultkey[64],vaultdata[256];
	format(vaultkey,63,"%s-%i-WesternMod", nazwa_gracza[id], klasa);
	format(vaultdata,255,"%i#%i#%i#%i#%i#%i#%i", doswiadczenie_gracza[id], poziom_gracza[id], inteligencja_gracza[id], zdrowie_gracza[id], wytrzymalosc_gracza[id], kondycja_gracza[id], grawitacja_gracza[id]);
	nvault_get(g_vault,vaultkey,vaultdata,255);
	
	replace_all(vaultdata, 255, "#", " ");
	
	new doswiadczeniegracza[32], poziomgracza[32], inteligencjagracza[32], silagracza[32], zrecznoscgracza[32], zwinnoscgracza[32], grawitacja[32];
	
	parse(vaultdata, doswiadczeniegracza, 31, poziomgracza, 31, inteligencjagracza, 31, silagracza, 31, zrecznoscgracza, 31, zwinnoscgracza, 31, grawitacja, 31);
	
	doswiadczenie_gracza[id] = str_to_num(doswiadczeniegracza);
	poziom_gracza[id] = str_to_num(poziomgracza)>0?str_to_num(poziomgracza):1;
	inteligencja_gracza[id] = str_to_num(inteligencjagracza);
	zdrowie_gracza[id] = str_to_num(silagracza);
	wytrzymalosc_gracza[id] = str_to_num(zrecznoscgracza);
	kondycja_gracza[id] = str_to_num(zwinnoscgracza);
	grawitacja_gracza[id] = str_to_num(grawitacja);
	punkty_gracza[id] = (poziom_gracza[id]-1)*2-inteligencja_gracza[id]-zdrowie_gracza[id]-wytrzymalosc_gracza[id]-kondycja_gracza[id];
} 

public WyrzucPrzedmiot(id)
{
	if(informacje_przedmiotu_gracza[id][0])
	{
		ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu CS-Kasyno.cba.pl] ^03Wyrzuciles %s.", nazwy_przedmiotow[informacje_przedmiotu_gracza[id][0]]);
		UsunPrzedmiot(id);
	}
	else
	ColorChat(id, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Nie masz zadnego przedmiotu.", nazwy_przedmiotow[informacje_przedmiotu_gracza[id][0]]);
}

public UsunPrzedmiot(id)
{
	informacje_przedmiotu_gracza[id][0] = 0;
	informacje_przedmiotu_gracza[id][1] = 0;
	if(is_user_alive(id))
	set_user_footsteps(id, 0);
	set_rendering(id,kRenderFxGlowShell,0,0,0 ,kRenderTransAlpha, 255);
	ZmienUbranie(id, 1);
	radar[id] = false;
}

public DajPrzedmiot(id, przedmiot)
{
	UsunPrzedmiot(id);
	informacje_przedmiotu_gracza[id][0] = przedmiot;
	ColorChat(id, GREEN, "^04[WesternMod] ^03Zdobyles %s.", nazwy_przedmiotow[informacje_przedmiotu_gracza[id][0]]);	
	
	switch(przedmiot)
	{
	case 1:
		{
			set_user_footsteps(id, 1);
		}
	case 2:
		{
			informacje_przedmiotu_gracza[id][1] = random_num(3,6);
		}
	case 3:
		{
			informacje_przedmiotu_gracza[id][1] = random_num(6, 11);
		}
	case 5:
		{
			informacje_przedmiotu_gracza[id][1] = random_num(6, 9);
		}
	case 6:
		{
			informacje_przedmiotu_gracza[id][1] = random_num(100, 150);
			set_rendering(id,kRenderFxGlowShell,0,0,0 ,kRenderTransAlpha, informacje_przedmiotu_gracza[id][1]);
		}
	case 7:
		{
			informacje_przedmiotu_gracza[id][1] = random_num(2, 4);
		}
	case 8:
		{
			DajPrzedmiot(id, random_num(1, sizeof nazwy_przedmiotow-1));
		}
	case 9:
		{
			informacje_przedmiotu_gracza[id][1] = random_num(1, 3);
			ZmienUbranie(id, 0);
			give_item(id, "weapon_hegrenade");
		}
	case 10:
		{
			informacje_przedmiotu_gracza[id][1] = random_num(4, 8);
			give_item(id, "weapon_hegrenade");
		}
	case 12:
		{
			informacje_przedmiotu_gracza[id][1] = random_num(1, 4);
		}
	case 13:
		{
			give_item(id, "weapon_awp");
		}
	case 15:
		{
			DajPrzedmiot(id, random_num(1, sizeof nazwy_przedmiotow-1));
		}
	case 16:
		{
			set_task(5.0, "WyszkolenieSanitarne", id+ZADANIE_WYSZKOLENIE_SANITARNE);
		}
	case 19:
		{
			informacje_przedmiotu_gracza[id][1] = 1;
		}
	case 26:
		{
			informacje_przedmiotu_gracza[id][1] = random_num(3, 6);
		}
	case 27:
		{
			informacje_przedmiotu_gracza[id][1] = 3;
		}
	case 29:
		{
			radar[id] = true;
		}
	case 30:
		{
			informacje_przedmiotu_gracza[id][1] = 30;
		}
	case 31:
		{
			informacje_przedmiotu_gracza[id][1] = 31;
		}
	case 32: // W miejsce X twoj case !!
		{
			set_task(5.0, "WyszkolenieSanitarne", id+ZADANIE_MARYCHA);
		}
	case 33:
		{
			set_user_gravity(id, 0.5);
		}
	case 34:
		{
			set_user_rendering(id, kRenderFxNone, 0, 0, 0, kRenderTransAlpha, 0);
			set_user_health (id, 15)
		}
	case 35:
		{
			give_item(id, "weapon_scout");
		}
	case 36:
		{
			give_item(id, "weapon_deagle");
		}
	case 37:
		{
			give_item(id, "weapon_awp");
		}
	case 39:
		{
			set_task(0.1,"godon",id,"",0,"a",1);
		}
	case 40:
		{
			set_task(0.1,"clipon",id,"",0,"a",1);
		}
	case 41:
		{
			informacje_przedmiotu_gracza[id][1] = 41;
		}
	case 42:
		{
			give_item(id, "weapon_m3");
		}
	}
}

public OpisPrzedmiotu(id)
{
	new opis_przedmiotu[128];
	new losowa_wartosc[3];
	num_to_str(informacje_przedmiotu_gracza[id][1], losowa_wartosc, 2);
	format(opis_przedmiotu, 127, opisy_przedmiotow[informacje_przedmiotu_gracza[id][0]]);
	replace_all(opis_przedmiotu, 127, "LW", losowa_wartosc);
	
	client_print(id, print_chat, "Przedmiot: %s.", nazwy_przedmiotow[informacje_przedmiotu_gracza[id][0]]);
	client_print(id, print_chat, "Opis: %s.", opis_przedmiotu);
}

public Wskrzes(id)
{
	id-=ZADANIE_WSKRZES;
	ExecuteHamB(Ham_CS_RoundRespawn, id);
}

public SprawdzPoziom(id)
{	
	if(poziom_gracza[id] < 5001)
	{
		while(doswiadczenie_gracza[id] >= doswiadczenie_poziomu[poziom_gracza[id]])
		{
			poziom_gracza[id]++;
			set_hudmessage(60, 200, 25, -1.0, 0.25, 0, 1.0, 2.0, 0.1, 0.2, 2);
			ShowSyncHudMsg(id, SyncHudObj3, "Awansowales do nastepnego poziomu!");
			client_cmd(id, "spk Mod/levelup");
		}
		
		punkty_gracza[id] = (poziom_gracza[id]-1)*2-inteligencja_gracza[id]-zdrowie_gracza[id]-wytrzymalosc_gracza[id]-kondycja_gracza[id];
	}
	ZapiszDane(id);
}

public PokazInformacje(id) 
{
	id -= ZADANIE_POKAZ_INFORMACJE;
	
	set_task(0.1, "PokazInformacje", id+ZADANIE_POKAZ_INFORMACJE);
	
	if(!is_user_alive(id))
	{
		new target = entity_get_int(id, EV_INT_iuser2);
		
		if(target == 0)
		return PLUGIN_CONTINUE;
		
		set_hudmessage(255, 255, 255, 0.6, -1.0, 0, 0.0, 0.3, 0.0, 0.0, 2);
		ShowSyncHudMsg(id, SyncHudObj, "Klasa : %s^nDoswiadczenie : %i / %i^nPoziom : %i^nPrzedmiot : %s^nZapraszamy na Strone Serwera", nazwy_klas[klasa_gracza[target]], doswiadczenie_gracza[target], doswiadczenie_poziomu[poziom_gracza[target]], poziom_gracza[target], nazwy_przedmiotow[informacje_przedmiotu_gracza[target][0]]);
		
		return PLUGIN_CONTINUE;
	}
	set_hudmessage(255, 0, 0, 0.02, 0.23, 0, 0.0, 0.3, 0.0, 0.0);
	ShowSyncHudMsg(id, SyncHudObj, "[Klasa : %s]^n[Doswiadczenie : %i / %i]^n[Poziom : %i]^n[Przedmiot : %s]^nZapraszamy na Strone Serwera", nazwy_klas[klasa_gracza[id]], doswiadczenie_gracza[id], doswiadczenie_poziomu[poziom_gracza[id]], poziom_gracza[id], nazwy_przedmiotow[informacje_przedmiotu_gracza[id][0]]);
	return PLUGIN_CONTINUE;
}  

public PokazReklame(id)
{
	id-=ZADANIE_POKAZ_REKLAME;
	ColorChat(id, GREEN, "^04[WesternMod] ^03Witaj na modzie WesternMod stworzonym przez ShoOt4yOu");
}

public PokazReklamee(id)
{
	id-=ZADANIE_POKAZ_REKLAMEE;
	set_hudmessage(70, 228, 26, 0.04, 0.84, 0, 6.0, 12.0)
	show_hudmessage(id, "Wszystkie klasy PREMIUM tylko 5zl")
	
}

public UstawSzybkosc(id)
{
	id -= id>32? ZADANIE_USTAW_SZYBKOSC: 0;
	
	if(klasa_gracza[id]){
		new grav = grawitacja_gracza[id] / 1000;
		set_user_gravity(id, get_user_gravity(id)-float(grav));
		set_user_maxspeed(id, szybkosc_gracza[id]);
	}
	
}


public ZmienUbranie(id,reset)
{
	if (id<1 || id>32 || !is_user_connected(id)) 
	return PLUGIN_CONTINUE;
	
	if (reset)
	cs_reset_user_model(id);
	else
	{
		new num = random_num(0,3);
		switch(get_user_team(id))
		{
		case 1: cs_set_user_model(id, Ubrania_CT[num]);
		case 2:cs_set_user_model(id, Ubrania_Terro[num]);
		}
	}
	
	return PLUGIN_CONTINUE;
}

public Pomoc()
{
	switch(random(9))
	{
	case 0: ColorChat(0, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Aby zresetowac umiejetnosci napisz /reset.");
	case 1: ColorChat(0, GREEN, "^04[WesternMod by ShoOt4yOu] ^03Aby zmienic klase napisz /klasa.");
	case 2: ColorChat(0, GREEN, "^04[WesternMod] ^03Jezeli masz przedmiot mozesz go uzyc, nacisnij E.");
	case 3: ColorChat(0, GREEN, "^04[WesternMod] ^03Aby wyrzucic przedmiot napisz /wyrzuc.");
	case 4: ColorChat(0, GREEN, "^04[WesternMod] ^03Aby zobaczyc opis przedmiotu napisz /przedmiot.");
	case 5: ColorChat(0, GREEN, "^04[WesternMod] ^03Aby zobaczyc opis klas napisz /klasy.");
	case 6: ColorChat(0, GREEN, "^04[WesternMod] ^03Aby zobaczyc swoje skille napisz /skille.");
	case 7: ColorChat(0, GREEN, "^04[WesternMod] ^03GG tworcy moda WesternMod: 3137866");
	case 8: ColorChat(0, GREEN, "^04[WesternMod] ^03Aby oddac komus item napisz /daj.");
	}
	set_task(36.0, "Pomoc");
}


/*public cmd_setlvl(id, level, cid)
{
if(!cmd_access(id,level,cid,3))
	return PLUGIN_HANDLED;
	new arg1[33];
	new arg2[6];
	read_argv(1, arg1, 32);
	read_argv(2, arg2, 5);
	new player = cmd_target(id, arg1);
	new value = str_to_num(arg2)-1;
	
	doswiadczenie_gracza[player] = doswiadczenie_poziomu[value];
	poziom_gracza[player] = 0;
	SprawdzPoziom(player);
	return PLUGIN_HANDLED;
}*/

public DotykBroni(weapon,id)
{
	new model[23];
	entity_get_string(weapon, EV_SZ_model, model, 22);
	if (!is_user_connected(id) || entity_get_edict(weapon, EV_ENT_owner) == id || equal(model, "models/w_backpack.mdl"))
	return HAM_IGNORED;
	return HAM_SUPERCEDE;
}

public BlokujKomende()
return PLUGIN_HANDLED;

stock bool:UTIL_In_FOV(id,target)
{
	if (Find_Angle(id,target,9999.9) > 0.0)
	return true;
	
	return false;
}
#if defined BOTY
public is_user_bot2(id)
{
	new ping, loss
	get_user_ping(id, ping, loss)
	if(ping > 0 && loss > 0)
	return false
	return true
}
#endif

stock Float:Find_Angle(Core,Target,Float:dist)
{
	new Float:vec2LOS[2];
	new Float:flDot;
	new Float:CoreOrigin[3];
	new Float:TargetOrigin[3];
	new Float:CoreAngles[3];
	
	pev(Core,pev_origin,CoreOrigin);
	pev(Target,pev_origin,TargetOrigin);
	
	if (get_distance_f(CoreOrigin,TargetOrigin) > dist)
	return 0.0;
	
	pev(Core,pev_angles, CoreAngles);
	
	for ( new i = 0; i < 2; i++ )
	vec2LOS[i] = TargetOrigin[i] - CoreOrigin[i];
	
	new Float:veclength = Vec2DLength(vec2LOS);
	
	//Normalize V2LOS
	if (veclength <= 0.0)
	{
		vec2LOS[0] = 0.0;
		vec2LOS[1] = 0.0;
	}
	else
	{
		new Float:flLen = 1.0 / veclength;
		vec2LOS[0] = vec2LOS[0]*flLen;
		vec2LOS[1] = vec2LOS[1]*flLen;
	}
	
	//Do a makevector to make v_forward right
	engfunc(EngFunc_MakeVectors,CoreAngles);
	
	new Float:v_forward[3];
	new Float:v_forward2D[2];
	get_global_vector(GL_v_forward, v_forward);
	
	v_forward2D[0] = v_forward[0];
	v_forward2D[1] = v_forward[1];
	
	flDot = vec2LOS[0]*v_forward2D[0]+vec2LOS[1]*v_forward2D[1];
	
	if ( flDot > 0.5 )
	{
		return flDot;
	}
	
	return 0.0;
}

stock Float:Vec2DLength( Float:Vec[2] )  
{ 
	return floatsqroot(Vec[0]*Vec[0] + Vec[1]*Vec[1] );
}

stock Display_Fade(id,duration,holdtime,fadetype,red,green,blue,alpha)
{
	message_begin( MSG_ONE, g_msg_screenfade,{0,0,0},id );
	write_short( duration );	// Duration of fadeout
	write_short( holdtime );	// Hold time of color
	write_short( fadetype );	// Fade type
	write_byte ( red );		// Red
	write_byte ( green );		// Green
	write_byte ( blue );		// Blue
	write_byte ( alpha );	// Alpha
	message_end();
}

stock set_user_clip(id, ammo)
{
	new weaponname[32], weaponid = -1, weapon = get_user_weapon(id, _, _);
	get_weaponname(weapon, weaponname, 31);
	while ((weaponid = find_ent_by_class(weaponid, weaponname)) != 0)
	if(entity_get_edict(weaponid, EV_ENT_owner) == id) 
	{
		set_pdata_int(weaponid, 51, ammo, 4);
		return weaponid;
	}
	return 0;
}

public cmd_addexp(id, level, cid)
{
	if(!cmd_access(id, level, cid, 3))
	return PLUGIN_HANDLED;
	new arg1[33];
	new arg2[10];
	read_argv(1,arg1,32);
	read_argv(2,arg2,9);
	new player = cmd_target(id, arg1, 0);
	remove_quotes(arg2);
	new exp = str_to_num(arg2);
	if(doswiadczenie_gracza[player] + exp > MAXEXP) {
		client_print(id, print_console, "[WesternMod] Chciales dodac za duzo expa (expgracza + wartosc < %i)", MAXEXP)
	} else {
		doswiadczenie_gracza[player] += exp;
		SprawdzPoziom(player);
	}
	return PLUGIN_HANDLED;
}

public cmd_remexp(id, level, cid)
{
	if(!cmd_access(id, level, cid, 3))
	return PLUGIN_HANDLED;
	new arg1[33];
	new arg2[10];
	read_argv(1,arg1,32);
	read_argv(2,arg2,9);
	new player = cmd_target(id, arg1, 0);
	remove_quotes(arg2);
	new exp = str_to_num(arg2);
	if(doswiadczenie_gracza[player] - exp < 1) {
		client_print(id, print_console, "[WesternMod] Chciales odjac za duzo expa (expgracza - wartosc > 1)")
	} else {
		doswiadczenie_gracza[player] -= exp;
		SprawdzPoziom(player);
	}
	return PLUGIN_HANDLED;
}

public InformacjeGraczy(id, level, cid)
{
	if (!cmd_access(id, level, cid, 1))
	return PLUGIN_HANDLED
	
	new players[32], lgraczy, name[32];
	get_players(players, lgraczy)
	console_print(id, "===================================");
	console_print(id, "= Klasa | Level | Przedmiot --> Nick =");
	console_print(id, "===================================");
	
	for (new a = 0; a < lgraczy; ++a)
	{
		new plr = players[a];
		if(!is_user_connected(plr) || is_user_hltv(plr))
		continue;
		
		get_user_name(plr, name, 31)
		
		if(informacje_przedmiotu_gracza[plr][0])
		console_print(id, "= %s | %i | %s --> %s", nazwy_klas[klasa_gracza[plr]], poziom_gracza[plr], nazwy_przedmiotow[informacje_przedmiotu_gracza[plr][0]], name);
		else
		console_print(id, "= %s | %i | Brak --> %s", nazwy_klas[klasa_gracza[plr]], poziom_gracza[plr], name);
	}
	console_print(id, "===================================");
	
	return PLUGIN_HANDLED
}

public czary(id)
{
	
	client_print(id, print_chat, "Inteligencja: %i, Zycie: %i, Kondycja: %i, Wytrzymalosc: %i   ", inteligencja_gracza[id], zdrowie_gracza[id], kondycja_gracza[id], wytrzymalosc_gracza[id], grawitacja_gracza[id]);
	client_print(id, print_chat, "To daje ci :%i Zycia, Szybsze bieganie o %i i Redukuje obrazenia o %0.0f%%", zdrowie_gracza[id]*2, floatround(kondycja_gracza[id]*1.3), redukcja_obrazen_gracza[id]*100 );
}

public native_WesternMod_add_exp(id, ile)
{
	doswiadczenie_gracza[id] += ile;
}

public native_WesternMod_give_ritem(id)
{
	DajPrzedmiot(id, random_num(1, sizeof nazwy_przedmiotow-1));
}

//Radar
public radar_scan()
{
	new PlayerCoords[3];
	new id;
	new Players[32];
	new i;
	new playerCount = 0;
	
	for (id=1; id<=g_maxplayers; id++)
	{
		if((!is_user_alive(id))||(!radar[id])) continue;
		
		if(get_players(Players, playerCount, "a") &&is_user_alive(id))
		{
			playerCount++; 
		}
		
		for (i=1;i<=playerCount;i++)
		{	
			get_user_origin(i, PlayerCoords)
			
			message_begin(MSG_ONE_UNRELIABLE, g_msgHostageAdd, {0,0,0}, id)
			write_byte(id)
			write_byte(i)		
			write_coord(PlayerCoords[0])
			write_coord(PlayerCoords[1])
			write_coord(PlayerCoords[2])
			message_end()
			
			message_begin(MSG_ONE_UNRELIABLE, g_msgHostageDel, {0,0,0}, id)
			write_byte(i)
			message_end()
		}
		emit_sound(id, CHAN_ITEM, sound_radar, 1.0, ATTN_NORM, 0, PITCH_NORM);
	}
}

public client_death(killer,victim,weapon,hitplace,TK) {
	
	if(!killer || !victim || TK)
	return;
	
	if(hitplace == HIT_HEAD)
	{
		
		doswiadczenie_gracza[killer] += doswiadczenie_za_hs;
		
		ColorChat(killer, GREEN, "^04[WesternMod] ^03Dostales %i doswiadczenia za trafienie w glowe.", doswiadczenie_za_hs);
		
	}
}

public OddajPrzedmiot(id)
{
	new menu = menu_create("Oddaj przedmiot", "OddajPrzedmiot_Handle");
	new cb = menu_makecallback("OddajPrzedmiot_Callback");
	new numer_przedmiotu;
	for(new i=0; i<=32; i++)
	{
		if(!is_user_connected(i))
		continue;
		oddaj_id[numer_przedmiotu++] = i;
		menu_additem(menu, nazwa_gracza[i], "0", 0, cb);
	}
	menu_display(id, menu);
}

public OddajPrzedmiot_Handle(id, menu, item)
{
	if(!is_user_connected(oddaj_id[item]))
	{
		client_print(id, print_chat, "Nie odnaleziono rzadanego gracza.");
		return PLUGIN_CONTINUE;
	}
	if(dostal_przedmiot[id])
	{
		client_print(id, print_chat, "Musisz poczekac 1 runde.");
		return PLUGIN_CONTINUE;
	}
	if(!informacje_przedmiotu_gracza[id][0])
	{
		client_print(id, print_chat, "Nie masz zadnego przedmiotu.");
		return PLUGIN_CONTINUE;
	}
	if(informacje_przedmiotu_gracza[oddaj_id[item]][0])
	{
		client_print(id, print_chat, "Ten gracz ma juz przedmiot.");
		return PLUGIN_CONTINUE;
	}
	dostal_przedmiot[oddaj_id[item]] = true;
	DajPrzedmiot(oddaj_id[item], informacje_przedmiotu_gracza[id][0]);
	informacje_przedmiotu_gracza[oddaj_id[item]][1] = informacje_przedmiotu_gracza[id][1];
	client_print(id, print_chat, "Przekazales %s graczowi %s.",nazwy_przedmiotow[informacje_przedmiotu_gracza[id][0]] , nazwa_gracza[oddaj_id[item]]);
	client_print(oddaj_id[item], print_chat, "Dostales %s od gracza %s.",nazwy_przedmiotow[informacje_przedmiotu_gracza[id][0]] , nazwa_gracza[id]);
	UsunPrzedmiot(id);
	return PLUGIN_CONTINUE;
}

public OddajPrzedmiot_Callback(id, menu, item)
{
	if(oddaj_id[item] == id)
	return ITEM_DISABLED;
	return ITEM_ENABLED;
}

public plugin_end()
{         
	new exp[3]={                 
		500,                 
		250,                 
		100         
	}         
	new fragi;         
	new omijamy[3];         
	for(new j=0;j<3;j++){                 
		for(new i=1;i<33;i++){                         
			if(!is_user_connected(i) || i == omijamy[0] || i == omijamy[1]){                                 
				continue;                         
			}                         
			if(fragi < get_user_frags(i)){                                 
				fragi = get_user_frags(i);                                 
				omijamy[j] = i;                        
			}                 
		}                 
		fragi = 0;                
		new name[64];                 
		get_user_name(omijamy[j],name,63);                
		client_print(0,print_chat,"%s zajal %d miejsce i zdobyl %d doswiadczenia",name,j+1,exp[j]);                
		doswiadczenie_gracza[omijamy[j]] += exp[j];         
	}
}

public Marycha(id)
{
	id -= ZADANIE_MARYCHA;
	if(informacje_przedmiotu_gracza[id][0] != 32)
	return PLUGIN_CONTINUE;
	set_task(5.0, "Marycha", id+ZADANIE_MARYCHA);
	if(!is_user_alive(id))
	return PLUGIN_CONTINUE;
	new health = get_user_health(id);
	new new_health = (health+20<maksymalne_zdrowie_gracza[id])?health+20:maksymalne_zdrowie_gracza[id];
	set_user_health(id, new_health);
	return PLUGIN_CONTINUE;
}




public KomendaDajPrzedmiot(id, level, cid)
{
	if(!cmd_access(id,level,cid,3))
	return PLUGIN_HANDLED;
	
	new arg1[33];
	new arg2[6];
	read_argv(1, arg1, 32);
	read_argv(2, arg2, 5);
	new gracz  = cmd_target(id, arg1, 0);
	new przedmiot = str_to_num(arg2)-1;
	
	if(przedmiot < 1 || przedmiot > sizeof nazwy_przedmiotow-1)
	{
		client_print(id, print_console, "Podales nieprawidlowy numer przedmiotu.")
		return PLUGIN_HANDLED;
	}
	
	DajPrzedmiot(gracz, przedmiot);
	return PLUGIN_HANDLED;
}

public godon(id)
{
	set_user_godmode(id, 1)
	set_task(5.0,"godoff",id,"",0,"a",1)
}
public godoff(id)
{
	set_user_godmode(id, 0)
}

public clipon(id)
{
	set_user_noclip(id, 1)
	set_task(5.0,"clipoff",id,"",0,"a",1)
}

public clipoff(id)
{
	set_user_noclip(id, 0)
}

stock Blast_ExplodeDamage( entid, Float:damage, Float:range ) 
{
	new Float:flOrigin1[ 3 ];
	entity_get_vector( entid, EV_VEC_origin, flOrigin1 );
	
	new Float:flDistance;
	new Float:flTmpDmg;
	new Float:flOrigin2[ 3 ];
	
	for( new i = 1; i <= gMaxPlayers; i++ ) 
	{
		if( is_user_alive( i ) && get_user_team( entid ) != get_user_team( i ) )
		{
			entity_get_vector( i, EV_VEC_origin, flOrigin2 );
			flDistance = get_distance_f( flOrigin1, flOrigin2 );
			
			static const szWeaponName[] = "Blast Explosion";
			
			if( flDistance <= range ) 
			{
				flTmpDmg = damage - ( damage / range ) * flDistance;
				fakedamage( i, szWeaponName, flTmpDmg, DMG_BLAST );
				
				message_begin( MSG_BROADCAST, gMessageDeathMsg );
				write_byte( entid );
				write_byte( i );
				write_byte( 0 );
				write_string( szWeaponName );
				message_end();
			}
		}
	}
}
stock Create_BeamCylinder( origin[ 3 ], addrad, sprite, startfrate, framerate, life, width, amplitude, red, green, blue, brightness, speed )
{
	message_begin( MSG_PVS, SVC_TEMPENTITY, origin ); 
	write_byte( TE_BEAMCYLINDER );
	write_coord( origin[ 0 ] );
	write_coord( origin[ 1 ] );
	write_coord( origin[ 2 ] );
	write_coord( origin[ 0 ] );
	write_coord( origin[ 1 ] );
	write_coord( origin[ 2 ] + addrad );
	write_short( sprite );
	write_byte( startfrate );
	write_byte( framerate );
	write_byte(life );
	write_byte( width );
	write_byte( amplitude );
	write_byte( red );
	write_byte( green );
	write_byte( blue );
	write_byte( brightness );
	write_byte( speed );
	message_end();
}
